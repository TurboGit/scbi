#!/bin/bash

DO_CLEAN_VERSION=no
DO_LOWER=no
DO_SHA=no

function sar-usage()
{
    echo
    echo SCBI-SOURCE-ARCHIVE $SCBI_VERSION
    echo
    echo $0 source-archive [options] plug-in1 [plug-in2...]

    echo ""
    echo "   -h | --help             this help message"
    echo "   -v | --version          display driver & plug-ins versions"
    echo "      | --plugins=<dir>    specify the plugins' directory"
    echo "   -e | --env=<name>       environment file ~/.scbi-<name>"
    echo "      | --plan=<name>      a build plan for modules"
    echo "   -c | --clean-version    use only numbers/dots in version"
    echo "      | --md5              create a md5 for the archive"
    echo "      | --sha1             create a sha-1 for the archive"
    echo "      | --sha256           create a sha-256 for the archive"
    echo "   -l | --lower-case       for lower-case archive name"
}

function sar-handle-module()
{
    local MODREF=$1

    local WORKDIR=$(mktemp -d /dev/shm/XXXXXX)

    export log=$WORKDIR/$module.log
    export SCBI_BDIR=$WORKDIR

    (
        local CDIR=$PWD

        cd $WORKDIR

        local module_info=()
        get-module-ref module_info $MODREF "@root"
        local module=${module_info[0]}
        local variant=${module_info[1]}
        local kind=${module_info[2]}
        local ref=${module_info[3]}

        if [[ $ref == NONE ]]; then
            ref=master
        fi

        if [[ $variant == native ]]; then
            variant="default"
            MODREF=$module:$ref
            #  Force reference to be able to get the vcs from
            #  the default variant.
            SCBI_MODVER=([$module]=$MODREF)
        fi

        mkdir -p $module
        echo Create source archive for $module \[${variant//./ }\] \($ref\)

        #  Load plug-in if exists

        if [[ ! -f $SCBI_PLUGINS/$module ]]; then
            echo "error: cannot find $module plugin"
            exit 1
        else
            source $SCBI_PLUGINS/$module
        fi

        #  Get the VCS

        local vcs=( $(get-vcs-data $module $variant) )
        local VCS_NAME=${vcs[3]}

        local nv=${#vcs[*]}

        #  We request a specific version but there is no VCS hook defined
        #  this is an error.

        if [[ $kind == BRANCH ]] && [[ $nv == 0 ]]; then
            echo "error: $module-vcs function not defined, cannot get vcs"
            exit 1
        fi

        get-vcs PREFIX TARGET ROOT $MODREF

        [[ $? != 0 ]] && exit 1

        #  Create the archive from the VCS reference

        cd $SCBI_BDIR/$module

        if [[ $DO_CLEAN_VERSION == yes ]]; then
            ref=$(echo $ref | sed 's/[A-Z]\|[a-z]//g;s/_/\./g')
            ref=${ref%%-*}
        fi

        local tar=( $(get-archive-data $module $variant $ref) )
        local nv=${#tar[*]}

        local VCS_URL=${vcs[4]}
        local REP=$(basename ${VCS_URL})
        local ARCHIVE_NAME=$REP

        case $VCS_NAME in
            git)
                local REP=$(basename $REP .git)
                local ARCHIVE_NAME=$(basename $ARCHIVE_NAME .git)
                local ARCHIVE_NAME=$(basename $ARCHIVE_NAME .bundle)
                ;;
            svn|subversion)
                ;;
            hg)
                ;;
            *)
                ;;
        esac

        local ARCHIVE_NAME=$ARCHIVE_NAME-$ref.tar.gz

        if [[ $nv != 0 ]]; then
            ARCHIVE_NAME=${tar[5]}
        fi

        [[ $DO_LOWER == yes ]] && ARCHIVE_NAME=${ARCHIVE_NAME,,}

        echo "  from " $VCS_URL
        echo "    to " $ARCHIVE_NAME

        #  Rename VCS link to proper module checkout to get a correct
        #  top directory into the archives.

        if [[ -h src ]]; then
            mv src $REP
        else
            mv vcs $REP
        fi

        case $ARCHIVE_NAME in
            *tgz)
                local FILE=$CDIR/$(basename $ARCHIVE_NAME)
                rm -f $FILE $FILE.tgz
                tar --exclude-vcs --gzip --dereference --create --file $FILE $REP
                ;;
            *tar.gz)
                local FILE=$CDIR/$(basename $ARCHIVE_NAME .gz)
                rm -f $FILE $FILE.gz
                tar --exclude-vcs --dereference --create --file $FILE $REP
                gzip -9 $FILE
                ;;
            *tar.bz2)
                local FILE=$CDIR/$(basename $ARCHIVE_NAME .bz2)
                rm -f $FILE $FILE.bz2
                tar --exclude-vcs --dereference --create --file $FILE $REP
                bzip2 -9 $FILE
                ;;
            *tar.zst)
                local FILE=$CDIR/$(basename $ARCHIVE_NAME .zst)
                rm -f $FILE $FILE.zst
                tar --exclude-vcs --dereference --create --file $FILE $REP
                zstd -9 $FILE
                ;;
            *tar.xz)
                local FILE=$CDIR/$(basename $ARCHIVE_NAME .xz)
                rm -f $FILE $FILE.xz
                tar --exclude-vcs --dereference --create --file $FILE $REP
                xz -9 $FILE
                ;;
            *tar)
                local FILE=$CDIR/$(basename $ARCHIVE_NAME)
                rm -f $FILE
                tar --exclude-vcs --dereference --create --file $FILE $REP
                ;;
            *zip)
                local FILE=$CDIR/$ARCHIVE_NAME
                rm -f $FILE.zip
                rm -fr $REP/.git* $REP/.hg $REP/.svn
                zip -qr $FILE $REP
                ;;
            *)
                echo "error: unknown archive format"
                ;;
        esac

        (
            cd $CDIR

            case $DO_SHA in
                md5)
                    md5sum $ARCHIVE_NAME > $ARCHIVE_NAME.md5
                    ;;
                sha1)
                    sha1sum $ARCHIVE_NAME > $ARCHIVE_NAME.sha1
                    ;;
                sha256)
                    sha256sum $ARCHIVE_NAME > $ARCHIVE_NAME.sha256
                    ;;
                *)
                    ;;
            esac
        )
    )

    rm -fr $WORKDIR
}

if [[ $1 == "subcommand" ]]; then
    shift
else
    echo "error: use scbi source-archive [options]"
    exit 1
fi

OPTFILE=$(mktemp)

ALLOPTS=$(getopt -u -o cl \
                 -l clean-version,lower-case,sha1,sha256,md5 \
                 -- $* 2> $OPTFILE)

if [[ $? != 0 ]]; then
    cat $OPTFILE
    echo try \"scbi source-archive --help\" for more information.
    rm -f $OPTFILE
    exit 1
fi

set -- $ALLOPTS

while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--clean-version)
            DO_CLEAN_VERSION=yes
            ;;
        --md5)
            DO_SHA=md5
            ;;
        --sha1)
            DO_SHA=sha1
            ;;
        --sha256)
            DO_SHA=sha256
            ;;
        -l|--lower-case)
            DO_LOWER=yes
            ;;
        (--)
            ;;
        (*)
            ;;
        (-*)
            echo "$0: error - unrecognized option $1" 1>&2; exit 1
            usage
            ;;
    esac
    shift
done

if [[ $DO_HELP = yes ]] || [[ -z ${SCBI_MODULES[*]} ]]; then
    sar-usage
    exit 0
fi

for module in ${SCBI_MODULES[*]}; do
    sar-handle-module $module || exit 1
done
