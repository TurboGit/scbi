# Completion command and options for scbi builds driver

_SCBI_COMMON="-h --help -v --version --plugins="

_SCBI_ARGS="${_SCBI_COMMON} -t -S --no-setup -W --no-wrapup -I
--no-install -u --update -s --setup -c --config -b --build -i
--install -r --tests -v -q --quiet -l --no-log -p --purge -P
--purge:only -d --deps -a --create-archive -h --help -j --jobs=
--target= --ini= --env= -e --tests:only --plan= -n --no-patch
--archive --deps:warning --dry-run -w --wrapup --force --enable-
--safe --build-dir --version --clean-install --log:yes
--log:no --log:on-failure --stat --stat:full --stat:short --prefix=
--color:dark --color:light --color:no"

_SCBI_ARC_ARGS="${_SCBI_COMMON} -e --env= --plan=
-c --clean-version -l --lower-case --sha1 --sha256 --md5"

_SCBI_LNT_ARGS="${_SCBI_COMMON} --error  --stat"

_SCBI_FMT_ARGS="${_SCBI_COMMON} --format  --stat"

_SCBI_SHL_ARGS="${_SCBI_COMMON} --env= -e --build-dir= --mode:use --mode:sandbox --mode:dev --mode:tests --run --stat"

_SCBI_SHO_ARGS="${_SCBI_COMMON} --env= -e --depends: --externals --externals:only --no-version --filter: --build-plan --build-plan:history --module-ref --module-ref:version --module-ref:variant --module-ref:full --stat"

_SCBI_STR_ARGS="${_SCBI_COMMON} --env= -e --list-keys -l --list --list:full -d --delete"

_SCBI_HOOKS="((pre|post)-)?(cross-)?(archive|vcs|build-depends|depends|out-of-tree|build-env|env|config|build|install|prefix|tests|tests-depends|config-options|modules|version|only-explicit-build|patches)"

_SCBI_MODE=std

_gnat_ini()
{
    local ROOT r b
    local IFS=$'\n'

    if [[ -f $HOME/.scbi ]]; then
        egrep '^\[.*\]' $HOME/.scbi |
            sed 's/\[//;s/\]//'
    fi
}

_gnat_targets()
{
    local ROOT r b
    local IFS=$'\n'

    ROOT=$(dirname $(command -v gcc))

    for r in $(ls -d $ROOT/../libexec/gcc/* 2>/dev/null); do
        b=$(basename $r)
        printf %s$'\n' "${b} "
    done
}

_scbi_list_filter()
{
    local ROOT r b
    local IFS=$'\n'

    echo all
    echo run
    echo dev
}

_scbi_list_depends()
{
    local ROOT r b
    local IFS=$'\n'

    echo direct
    echo full
}

_scbi_log()
{
    local ROOT r b
    local IFS=$'\n'

    echo yes
    echo no
    echo on-failure
}

_scbi_color()
{
    local ROOT r b
    local IFS=$'\n'

    echo no
    echo light
    echo dark
}

_scbi_shell()
{
    local ROOT r b
    local IFS=$'\n'

    echo dev
    echo sandbox
    echo tests
    echo use
}

_scbi_list()
{
    local ROOT r b
    local IFS=$'\n'

    echo full
}

_scbi_env()
{
    local IFS=$'\n'

    for r in $(ls $HOME/.config/scbi/.env-* 2>/dev/null); do
        printf %s$'\n' "${r#$HOME/.config/scbi/.env-} "
    done

    for r in $(ls $PWD/.env-* 2>/dev/null); do
        printf %s$'\n' "${r#$PWD/.env-} "
    done
}

_scbi_plan()
{
    local IFS=$'\n'

    for r in $(ls $HOME/.config/scbi/.plan-* 2>/dev/null); do
        printf %s$'\n' "${r#$HOME/.config/scbi/.plan-} "
    done

    for r in $(ls $PWD/.plan-* 2>/dev/null); do
        printf %s$'\n' "${r#$PWD/.plan-} "
    done
}

_scbi_feature()
{
    local IFS=$'\n'

    for r in $(grep -s '$(is-enabled' $HOME/.config/scbi/* |
                   sed 's/.*is-enabled \([a-zA-Z\-\_]*\).*/--enable-\1/g');
    do
        printf %s$'\n' "$r "
    done
}

_scbi_store_key()
{
    local IFS=$' '

    if [[ -f $HOME/.config/scbi/.store ]]; then
        while IFS=" " read K V; do
            echo $K
        done < $HOME/.config/scbi/.store
    fi
}

_scbi_variants()
{
    local mod=$1
    local cur=$2
    local IFS=$'\n'

    # Remove current variants from the completing list
    [[ -z $cur ]] && cur="@noname@" || cur="${cur//./|}"

    for v in $(grep "function $mod-*" ~/.config/scbi/$mod | \
                   sed "s/function $mod-//g;s/()//g" | \
                   sed -r "s/${_SCBI_HOOKS}//g" | \
                   tr '-' '\n' | sort | uniq | \
                   grep -v common | grep -v -E "$cur");
    do
        printf %s$'\n' $v
    done
}

_scbi_complete()
{
    complete -o bashdefault -o default -o nospace -F _$1 $1
}

_scbicomp_1()
{
    local c IFS=' '$'\t'$'\n'
    for c in $1; do
        case "$c$2" in
            -*=*)  printf %s$'\n' "$c$2" ;;
            -*:*)  printf %s$'\n' "$c$2" ;;
            *.)    printf %s$'\n' "$c$2" ;;
            *)     printf %s$'\n' "$c$2 " ;;
        esac
    done
}

_value_already_in()
{
    local NV=${1::-1}

    NV=${NV%:*}

    for CW in "${COMP_WORDS[@]}"; do
        local CCW=${CW%:*}
        if [[ $CCW == $NV ]]; then
            return 0
        fi
    done
    return 1
}

# generates completion reply with compgen
_scbicomp()
{
    local cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ $# -gt 2 ]]; then
        cur="$3"
    fi

    local REPLY=()

    case "$cur" in
        -*=)
            REPLY=()
            ;;
        *)
            local IFS=$'\n'
            REPLY=($(compgen -P "${2-}" \
                             -W "$(_scbicomp_1 "${1-}" "${4-}")" \
                             -- "$cur"))
            ;;
    esac

    # Remove from COMPREPLY already present options
    local LR=""
    [[ ${#REPLY[*]} != 0 ]] && LR=${REPLY[-1]}

    for O in "${REPLY[@]}"; do
        _value_already_in $O
        if [[ $? == 1 ]] || [[ $O == $LR ]]; then
           COMPREPLY+=( $O )
        fi
    done
}

_scbi()
{
    COMPREPLY=()
    local cur=$(_get_cword =:)
    local subc=${COMP_WORDS[1]}
    local prev=${COMP_WORDS[COMP_CWORD-1]}

    case "$subc" in
        source-archive)
            _SCBI_MODE=arc
            ;;
        lint)
            _SCBI_MODE=lnt
            ;;
        format)
            _SCBI_MODE=fmt
            ;;
        show)
            _SCBI_MODE=sho
            ;;
        shell)
            _SCBI_MODE=shl
            ;;
        store)
            _SCBI_MODE=str
            ;;
        *)
            _SCBI_MODE=std
            ;;
    esac

    case "$cur" in
        --ini=*)
            _scbicomp "$(_gnat_ini)" "" "${cur##--ini=}"
            return 0
            ;;
        --target=*)
            _scbicomp "$(_gnat_targets)" "" "${cur##--target=}"
            return 0
            ;;
        --plan=*)
            _scbicomp "$(_scbi_plan)" "" "${cur##--plan=}"
            return 0
            ;;
        --env=*)
            _scbicomp "$(_scbi_env)" "" "${cur##--env=}"
            return 0
            ;;
        --enable-*)
            _scbicomp "$(_scbi_feature)" "" "${cur}"
            return 0
            ;;
        --depends:*)
            _scbicomp "$(_scbi_list_depends)" "" "${cur##--depends:}"
            return 0
            ;;
        --filter:*)
            _scbicomp "$(_scbi_list_filter)" "" "${cur##--filter:}"
            return 0
            ;;
        --log:*)
            _scbicomp "$(_scbi_log)" "" "${cur##--log:}"
            return 0
            ;;
        --color:*)
            _scbicomp "$(_scbi_color)" "" "${cur##--color:}"
            return 0
            ;;
        --mode:*)
            _scbicomp "$(_scbi_shell)" "" "${cur##--mode:}"
            return 0
            ;;
        --list:*)
            _scbicomp "$(_scbi_list)" "" "${cur##--list:}"
            return 0
            ;;
        */*)
            local mod=${cur%/*}
            if [[ -f $HOME/.config/scbi/$mod ]]; then
                local curdef=${cur##*/}
                local curv=""
                local ccurv=""
                if [[ ${curdef/./} != ${curdef} ]]; then
                    local curv=${curdef%.*}
                    local curdef=${curdef##*.}
                    local ccurv="${curv}."
                fi
                _scbicomp "$(_scbi_variants "$mod" "$curv")" "$mod/${ccurv}" "${curdef}"
            fi
            return 0
            ;;
        -*)
            if [[ ${_SCBI_MODE} == std ]]; then
                _scbicomp "$_SCBI_ARGS"
            elif [[ ${_SCBI_MODE} == lnt ]]; then
                _scbicomp "$_SCBI_LNT_ARGS"
            elif [[ ${_SCBI_MODE} == fmt ]]; then
                _scbicomp "$_SCBI_FMT_ARGS"
            elif [[ ${_SCBI_MODE} == str ]]; then
                _scbicomp "$_SCBI_STR_ARGS"
            elif [[ ${_SCBI_MODE} == shl ]]; then
                _scbicomp "$_SCBI_SHL_ARGS"
            elif [[ ${_SCBI_MODE} == sho ]]; then
                _scbicomp "$_SCBI_SHO_ARGS"
            else
                _scbicomp "$_SCBI_ARC_ARGS"
            fi
            ;;
        *)
            case "$prev" in
                -t)
                    _scbicomp "$(_gnat_targets)" "" "${cur##--target=}"
                    return 0
                    ;;
                *)
                    _scbicomp "$(cd $HOME/.config/scbi; ls [a-z]*) source-archive lint format shell show store"
                    ;;
            esac
    esac
} &&
_scbi_complete scbi
