# Completion command and options for scbi builds driver

_SCBI_ARGS="-t -S --no-setup -W --no-wrapup -I --no-install -u --update
-s --setup -c --config -b --build -i --install -r --tests -v
-l --shell --shell:sandbox --shell:dev --shell:tests --no-log
-p --purge -P --purge:only --run -d --deps -a --archive -h --help
-j --jobs= --target= --env= -e --tests:only --plan= -n --no-patch --tar
--list-depends: --list-externals --list-externals:only --list-no-version
 --list-filter: --deps:warning
--dry-run -w --wrapup --force --enable- --safe --plugins --build-dir
--list-plan --version --clean-install --log:yes --log:no --log:on-failure
--store --stat --stat:full --module-version"

_SCBI_HOOKS="((pre|post)-)?(cross-)?(tar|vcs|build-depends|depends|out-of-tree|build-env|env|config|build|install|prefix|tests|config-options|modules|version)"

_gnat_targets()
{
    local ROOT r b
    local IFS=$'\n'

    ROOT=$(dirname $(command -v gcc))

    for r in $(ls -d $ROOT/../libexec/gcc/* 2>/dev/null); do
        b=$(basename $r)
        printf %s$'\n' "${b} "
    done
}

_scbi_list_filter()
{
    local ROOT r b
    local IFS=$'\n'

    echo all
    echo run
    echo dev
}

_scbi_list_depends()
{
    local ROOT r b
    local IFS=$'\n'

    echo direct
    echo full
}

_scbi_log()
{
    local ROOT r b
    local IFS=$'\n'

    echo yes
    echo no
    echo on-failure
}

_scbi_shell()
{
    local ROOT r b
    local IFS=$'\n'

    echo dev
    echo sandbox
}

_scbi_env()
{
    local IFS=$'\n'

    for r in $(ls $HOME/.config/scbi/.env-* 2>/dev/null); do
        printf %s$'\n' "${r#$HOME/.config/scbi/.env-} "
    done

    for r in $(ls $PWD/.env-* 2>/dev/null); do
        printf %s$'\n' "${r#$PWD/.env-} "
    done
}

_scbi_plan()
{
    local IFS=$'\n'

    for r in $(ls $HOME/.config/scbi/.plan-* 2>/dev/null); do
        printf %s$'\n' "${r#$HOME/.config/scbi/.plan-} "
    done

    for r in $(ls $PWD/.plan-* 2>/dev/null); do
        printf %s$'\n' "${r#$PWD/.plan-} "
    done
}

_scbi_feature()
{
    local IFS=$'\n'

    for r in $(grep -s '$(is-enabled' $HOME/.config/scbi/* |
                   sed 's/.*is-enabled \([a-zA-Z\-\_]*\).*/--enable-\1/g');
    do
        printf %s$'\n' "$r "
    done
}

_scbi_store_key()
{
    local IFS=$' '

    if [[ -f $HOME/.config/scbi/.store ]]; then
        while read K V; do
            echo $K
        done < $HOME/.config/scbi/.store
    fi
}

_scbi_variants()
{
    local mod=$1
    local cur=$2
    local IFS=$'\n'

    # Remove current variants from the completing list
    [[ -z $cur ]] && cur="@noname@" || cur="${cur//./|}"

    for v in $(grep "function $mod-*" ~/.config/scbi/$mod | \
                   sed "s/function $mod-//g;s/()//g" | \
                   sed -r "s/${_SCBI_HOOKS}//g" | \
                   tr '-' '\n' | sort | uniq | \
                   grep -v common | grep -v -E "$cur");
    do
        printf %s$'\n' $v
    done
}

_scbi_complete()
{
    complete -o bashdefault -o default -o nospace -F _$1 $1
}

_scbicomp_1()
{
    local c IFS=' '$'\t'$'\n'
    for c in $1; do
        case "$c$2" in
            -*=*)  printf %s$'\n' "$c$2" ;;
            -*:*)  printf %s$'\n' "$c$2" ;;
            *.)    printf %s$'\n' "$c$2" ;;
            *)     printf %s$'\n' "$c$2 " ;;
        esac
    done
}

# generates completion reply with compgen
_scbicomp()
{
    local cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ $# -gt 2 ]]; then
        cur="$3"
    fi

    case "$cur" in
        -*=)
            COMPREPLY=()
            ;;
        *)
            local IFS=$'\n'
            COMPREPLY=($(compgen -P "${2-}" \
                                 -W "$(_scbicomp_1 "${1-}" "${4-}")" \
                                 -- "$cur"))
            ;;
    esac
}

_scbi()
{
    COMPREPLY=()
    local cur=$(_get_cword =:)
    local prev=${COMP_WORDS[COMP_CWORD-1]}

    case "$cur" in
        --target=*)
            _scbicomp "$(_gnat_targets)" "" "${cur##--target=}"
            return 0
            ;;
        --plan=*)
            _scbicomp "$(_scbi_plan)" "" "${cur##--plan=}"
            return 0
            ;;
        --env=*)
            _scbicomp "$(_scbi_env)" "" "${cur##--env=}"
            return 0
            ;;
        --enable-*)
            _scbicomp "$(_scbi_feature)" "" "${cur}"
            return 0
            ;;
        --list-depends:*)
            _scbicomp "$(_scbi_list_depends)" "" "${cur##--list-depends:}"
            return 0
            ;;
        --list-filter:*)
            _scbicomp "$(_scbi_list_filter)" "" "${cur##--list-filter:}"
            return 0
            ;;
        --log:*)
            _scbicomp "$(_scbi_log)" "" "${cur##--log:}"
            return 0
            ;;
        --shell:*)
            _scbicomp "$(_scbi_shell)" "" "${cur##--shell:}"
            return 0
            ;;
        */*)
            local mod=${cur%/*}
            if [[ -f $HOME/.config/scbi/$mod ]]; then
                local curdef=${cur##*/}
                local curv=""
                local ccurv=""
                if [[ ${curdef/./} != ${curdef} ]]; then
                    local curv=${curdef%.*}
                    local curdef=${curdef##*.}
                    local ccurv="${curv}."
                fi
                _scbicomp "$(_scbi_variants "$mod" "$curv")" "$mod/${ccurv}" "${curdef}"
            fi
            return 0
            ;;
        -*)
            _scbicomp "$_SCBI_ARGS"
            ;;
         *)
            case "$prev" in
                -t)
                    _scbicomp "$(_gnat_targets)" "" "${cur##--target=}"
                    return 0
                    ;;
                --store)
                    _scbicomp "$(_scbi_store_key)" "" "${cur##--store}"
                    return 0
                    ;;
                *)
                    _scbicomp "$(cd $HOME/.config/scbi; ls [a-z]*)"
                    ;;
            esac
    esac
} &&
_scbi_complete scbi
