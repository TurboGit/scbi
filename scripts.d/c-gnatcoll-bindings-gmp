
function c-gnatcoll-bindings-gmp-vcs()
{
    echo default
    echo none
    echo git
    echo https://github.com/AdaCore/gnatcoll-bindings
}

function c-gnatcoll-bindings-gmp-tar()
{
    local VERSION=$1

    echo default
    echo none
    echo none
    echo none
    echo gnatcoll-bindings-$VERSION-src.tar.gz
}

function c-gnatcoll-bindings-gmp-cross-build-depends()
{
    echo c-sandbox
}

function c-gnatcoll-bindings-gmp-build-depends()
{
    echo p-gnat
    echo c-gprbuild
}

function c-gnatcoll-bindings-gmp-common-depends()
{
    echo c-gnatcoll-core
    echo c-xmlada
}

function c-gnatcoll-bindings-gmp-cross-depends()
{
    echo c-gmp
}

function c-gnatcoll-bindings-gmp-out-of-tree()
{
    echo false
}

function c-gnatcoll-bindings-gmp-env()
{
    local PREFIX=$1
    local TARGET=$2

    add-to-var GPR_PROJECT_PATH $PREFIX/share/gpr
    add-to-var LD_LIBRARY_PATH  $PREFIX/lib
}

function c-gnatcoll-bindings-gmp-build()
{
    local PREFIX=$1
    local TARGET=$2

    local GOPTS="-j$SCBI_JOBS -p -XBUILD=PROD --target=$TARGET"

    for kind in static relocatable static-pic; do
        gprbuild $GOPTS -XLIBRARY_TYPE=$kind gmp/gnatcoll_gmp.gpr
    done
}

function c-gnatcoll-bindings-gmp-install()
{
    local PREFIX=$1
    local TARGET=$2

    local GOPTS="-p -f --prefix=$PREFIX -XBUILD=PROD --target=$TARGET"
    local GOPTS="$GOPTS --build-var=LIBRARY_TYPE"

    local PM=$PREFIX/share/gpr/manifests

    if [[ -f $PM/gnatcoll_gmp ]]; then
        gprinstall $GOPTS --uninstall gnatcoll_gmp
    fi

    for kind in static relocatable static-pic; do
        gprinstall $GOPTS -XLIBRARY_TYPE=$kind \
                   --build-var=GNATCOLL.GMP_BUILD \
                   --install-name=gnatcoll_gmp \
                   --build-name=$kind gmp/gnatcoll_gmp.gpr
    done
}
