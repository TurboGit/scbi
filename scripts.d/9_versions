############################## load-module-plan
#
#

declare -A MODVER

function load-module-plan()
{
    local PLAN=$PWD/.scbi-plan-$1

    local GROUP=no
    local GMOD=""

    # if not found in definitions install dir, look in current directory

    if [[ ! -f $PLAN ]]; then
        PLAN=$SCBI_DEFS/.plan-$1
    fi

    if [[ -f $PLAN ]]; then
        while read modref arg; do
            if [[ "$modref" = "@load" ]]; then
                load-module-plan $arg
            elif [[ "$modref" = "" ]]; then
                true
            elif [[ "${modref:0:1}" = "]" ]]; then
                REF=""
                if [[ ! -z $arg ]]; then
                    REF=$arg
                else
                    REF=${modref:1}
                fi
                # set REF to all all module's group in GMOD
                for mod in $GMOD; do
                    local module_info=( $(parse-module-ref $mod) )
                    local module=${module_info[0]}
                    MODVER[$module]=${module}${REF}
                done
                GROUP=no
                GMOD=""
            elif [[ $GROUP = yes ]]; then
                # stote all module's group in GMOD
                GMOD="$GMOD $modref"
            elif [[ "$modref" = "[" ]]; then
                if [[ ! -z $arg ]]; then
                    elog build "build plan unexpected $arg on group start"
                    exit 1
                fi
                GROUP=yes
            elif [[ "$modref" != "#" ]]; then
                local module_info=( $(parse-module-ref $modref) )
                local module=${module_info[0]}
                MODVER[$module]=$modref
            fi
        done < $PLAN
    else
        elog build build plan .plan-$1 does not exists
        exit 1
    fi

    if [[ $GROUP = yes ]]; then
        elog build build plan group is not closed .plan-$1
        exit 1
    fi
}

############################## display-build-plan
#
#

function display-build-plan()
{
    echo "There is ${#MODVER[*]} module(s) in the plan"
    for module in ${!MODVER[*]}; do
        echo ${MODVER[$module]}
    done
}

############################## display-build-plan
#
#

function record-build-plan()
{
    local module=$1
    local variant=$2

    local PLAN=$SCBI_BDIR/$module/$SCBI_TARGET-$variant/.log/build-plan

    echo "# build plan" > $PLAN

    for module in ${!MODVER[*]}; do
        echo ${MODVER[$module]} >> $PLAN
    done
}

############################## set-module-ref
#
# Set a module reference into the build plan only if this reference a
# specific version.

function set-module-ref()
{
    # full module reference is name[/variant][:version]
    local modref="$1"

    local module_info=( $(parse-module-ref $modref) )

    if [[ "${module_info[1]}" != "default" ]]   \
         || [[ ${module_info[2]} != "NONE" ]]   \
         || [[ "${module_info[3]}" != "NONE" ]];
    then
        local module=${module_info[0]}
        MODVER[$module]=$modref
    fi
}

############################## parse-module-ref
#
# Returns an array with the following information:
# ( module ["default"|variant] [DEV|VERSION|BRANCH|NONE] [branch|version|NONE] )

function parse-module-ref()
{
    local modref=$1

    local module=""

    # check version

    local ver=${modref##*:}

    if [[ $ver == $modref ]]; then
        # no version specified
        local KIND=NONE
        local version=NONE
        module=$modref
    else
        # version specified, check for tar version
        local vb=${ver:0:1}

        if [[ $ver = dev ]]; then
            KIND=DEV
            local version=dev
        elif [[ $vb = '#' ]]; then
            KIND=VERSION
            local version=${ver:1}
        else
            KIND=BRANCH
            local version=$ver
        fi

        module=${modref%:*}
    fi

    local variant=${module##*/}

    if [[ $variant == $module ]]; then
        #  no variant
        variant=default
    else
        module=${module%/*}
    fi

    echo $module
    echo $variant
    echo $KIND
    echo $version
}

function get-module-ref()
{
    local MODREF=$1

    local module_info=( $(parse-module-ref $MODREF) )
    local module=${module_info[0]}

    local modplan=${MODVER[$module]}

    if [[ ! -z $modplan ]]; then
        module_info=( $(parse-module-ref $modplan) )
    fi

    echo ${module_info[0]}
    echo ${module_info[1]}
    echo ${module_info[2]}
    echo ${module_info[3]}
}
