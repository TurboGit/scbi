# ############################## has-discriminant
# returns 1 if the discriminant has been found

function has-discriminant()
{
    local disc=$1

    if [[ ${SCBI_OS_DISCRIMINANTS[$disc]} == "yes" ]]; then
        return 0
    else
        return 1
    fi
}

# ############################## check-discriminants
# return 1 if all discriminants match

function check-discriminants()
{
    local discs="$1"

    for d in ${discs/,/ }; do
        has-discriminant "$d"
        [[ $? == 1 ]] && return 1
    done

    return 0
}

# ############################## load-module-plan
#
#

function _internal_merge_variant()
{
    local cvariant=$1
    local rvariant=$2

    local rvariant=${rvariant//+/ +}
    local rvariant=${rvariant//-/ -}
    local rvariant=${rvariant//\./ .}

    local REF="${cvariant}"
    [[ $REF == "default" ]] && REF=""

    local AREF=""
    local DREF=()
    local ACTION=no

    for v in ${rvariant}; do
        if [[ ${v:0:1} == "+" ]]; then
            local ACTION=add
            [[ -n $AREF ]] && AREF+="."
            AREF+=${v:1}
        elif [[ ${v:0:1} == "-" ]]; then
            local ACTION=del
            DREF+=(${v:1})
        elif [[ $ACTION == add ]]; then
            [[ -n $AREF ]] && AREF+="."
            AREF+=${v:1}
        elif [[ $ACTION == del ]]; then
            DREF+=(${v:1})
        else
            REF=""
            [[ -n $AREF ]] && AREF+="."
            AREF+=${v/\./}
        fi
    done

    #  Add current variant (if any) after group variants

    local NREF="${AREF}"

    for o in ${REF//./ }; do
        ! has-variant "$NREF" $o &&
            {
                [[ -n $NREF ]] && NREF+="."
                local NREF+="$o"
            }
    done

    local REF=$NREF

    #  Remove variants if needed

    for n in ${DREF[*]}; do
        local REF=${REF#$n\.}
        local REF=${REF%\.$n}
        local REF=${REF//\.$n\./\.}
        [[ $REF == $n ]] && local REF=""
    done

    echo "${REF:+/}$REF"
}

declare -gA SCBI_PLAN_LOADED

function load-module-plan()
{
    local NAMEREF=$1

    local VARIANT=${NAMEREF#*/}

    function resolve-set()
    {
        local REF=$1

        if [[ ${#_SETS[*]} > 0 ]] && [[ ${REF/\$//} != $REF ]]; then
            for VAR in ${!_SETS[*]}; do
                local VAL=${_SETS[$VAR]}
                REF=${REF/\$\{$VAR\}/$VAL}
                REF=${REF/\$$VAR/$VAL}
            done
        fi

        echo $REF
    }

    if [[ $VARIANT == $NAMEREF ]]; then
        VARIANT=""
        NAME=${NAMEREF}
    else
        NAME=${NAMEREF%/*}
    fi

    #  Load a plan only once

    if [[ ${SCBI_PLAN_LOADED[$NAME]} == yes ]]; then
        return
    else
        SCBI_PLAN_LOADED[$NAME]=yes
    fi

    declare -A _SETS

    local PLAN=$PWD/.scbi-plan-$NAME

    local GROUP=no
    local GMOD=""

    #  If not found in definitions install dir, look in current directory

    if [[ ! -f $PLAN ]]; then
        PLAN=$SCBI_PLUGINS/.plan-$NAME
    fi

    if [[ -f $PLAN ]]; then
        while read modref arg1 arg2 arg3; do
            if [[ "$modref" = "@load" ]]; then
                load-module-plan $arg1
            elif [[ "$modref" = "@on" ]]; then
                if [[ "$arg2" != "use" ]]; then
                    elog build syntax error, missing use in @on
                    exit 1
                fi

                if check-discriminants "$arg1"; then
                    local minfo=()
                    parse-module-ref minfo $arg3
                    local module=${minfo[0]}
                    SCBI_MODVER[$module]=${arg3/*=/}
                fi
            elif [[ "$modref" = "@alias" ]]; then
                if [[ "$arg2" != "use" ]]; then
                    elog build syntax error, missing use in @alias
                    exit 1
                fi

                SCBI_MODULE_ALIAS[$arg1]=$arg3
            elif [[ "$modref" = "@for" ]]; then
                if [[ "$arg2" != "use" ]]; then
                    elog build syntax error, missing use in @for
                    exit 1
                fi

                local minfo=()
                parse-module-ref minfo "$arg1=$arg3"
                local module=${minfo[0]}
                SCBI_MODVER[$module]=$(resolve-set $arg3)

            elif [[ "$modref" = "@set" ]]; then
                if [[ "$arg2" != "=" ]]; then
                    elog build syntax error, missing "=" in @set
                    exit 1
                fi
                _SETS["$arg1"]="$arg3"

            elif [[ -z $modref ]]; then
                true
            elif [[ "${modref:0:1}" = "]" ]]; then
                REF=""
                if [[ -n $arg1 ]]; then
                    REF=$arg1
                else
                    REF=${modref:1}
                fi
                #  set REF to all module's group in GMOD
                for mod in $GMOD; do
                    local minfo=()
                    parse-module-ref minfo $mod
                    local module=${minfo[0]}
                    local variant=${minfo[1]}
                    local kind=${minfo[2]}
                    local version=${minfo[3]}

                    #  If version is inherit then just take the
                    #  current recorded version for this module.

                    if [[ $version == "NONE" ]] &&
                           [[ $variant == "default" ]] &&
                           [[ -n ${SCBI_MODVER[$module]} ]];
                    then
                        local minfo=()
                        parse-module-ref minfo ${SCBI_MODVER[$module]}
                        local module=${minfo[0]}
                        local variant=${minfo[1]}
                        local kind=${minfo[2]}
                        local version=${minfo[3]}
                    fi

                    local rinfo=()
                    parse-module-ref rinfo "name$REF"
                    local rvariant=${rinfo[1]}
                    local rkind=${rinfo[2]}
                    local rversion=${rinfo[3]}

                    local FREF=""

                    #  Override the variant & version only if defined in REF

                    if [[ $rvariant != "default" ]]; then
                        FREF=$(_internal_merge_variant "$variant" "$rvariant")
                    elif [[ $variant != "default" ]]; then
                        FREF="/$variant"
                    fi

                    if [[ $rversion != NONE ]]; then
                        if [[ $rkind == VERSION ]]; then
                            FREF+=":#$rversion"
                        else
                            FREF+=":$rversion"
                        fi
                    elif [[ $version != NONE ]]; then
                        if [[ $kind == VERSION ]]; then
                            FREF+=":#$version"
                        else
                            FREF+=":$version"
                        fi
                    fi

                    SCBI_MODVER[$module]=$(resolve-set "${module}${FREF}")
                done
                GROUP=no
                GMOD=""
            elif [[ $GROUP != no ]]; then
                #  store all module's group in GMOD
                [[ $GROUP == yes ]] && GMOD="$GMOD $modref"
            elif [[ "$modref" = "[" ]]; then
                if [[ -n $arg1 ]]; then
                    if [[ $arg1 = "=" ]]; then
                        if has-variant "$VARIANT" "$arg2" \
                            || check-discriminants "$arg2";
                        then
                            GROUP=yes
                        elif [[ -n $arg3 ]]; then
                            if has-variant "$VARIANT" "$arg3" \
                                    || check-discriminants "$arg3";
                            then
                                GROUP=yes
                            else
                                GROUP=closed
                            fi
                        else
                            GROUP=closed
                        fi
                    elif [[ $arg1 = "/=" ]]; then
                        if has-variant "$VARIANT" "$arg2" \
                                || check-discriminants "$arg2";
                        then
                            GROUP=closed
                        elif [[ -n $arg3 ]]; then
                            if has-variant "$VARIANT" "$arg3" \
                                    || check-discriminants "$arg3";
                            then
                                GROUP=closed
                            else
                                GROUP=yes
                            fi
                        else
                            GROUP=yes
                        fi
                    else
                       elog build "build plan unexpected $arg1 on group start"
                       exit 1
                    fi
                else
                    GROUP=yes
                fi
            elif [[ "${modref:0:1}" != "#" ]]; then
                local minfo=()
                parse-module-ref minfo $modref
                local module=${minfo[0]}

                SCBI_MODVER[$module]=$(resolve-set "${modref/*=/}")
            fi
        done < $PLAN
    else
        elog build build plan .plan-$1 does not exists
        exit 1
    fi

    if [[ $GROUP = yes ]]; then
        elog build build plan group is not closed .plan-$1
        exit 1
    fi

    unset _SETS
}

############################## load-module-plan
#
# Checks all auto variant and use the native one or the default variant
# depending on the availability of the dependencies.

function handle-plan-meta-module()
{
    local M=$1

    local value=${SCBI_MODVER[$M]}

    local mod=${M/*=/}
    local FORMODULE=${M%$mod}
    FORMODULE=${FORMODULE%=}

    local module_info=()
    get-module-ref module_info $value $FORMODULE

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local ref=${module_info[3]}

    if [[ $ref != master ]] &&
           [[ $ref != NONE ]] &&
           [[ -f $SCBI_PLUGINS/$module ]];
    then
        source $SCBI_PLUGINS/$module

        get-hook FCT $module $variant propagate-version

        if [[ -z $FCT ]]; then
            PROPAGATE_MODE=version
        else
            PROPAGATE_MODE=$($FCT $SCBI_PREFIX $SCBI_TARGET $variant)
            [[ ${PROPAGATE_MODE} == false ]] && return
        fi

        for mod in $(plugin-call-variant-hooks \
                         $module modules $SCBI_PREFIX $SCBI_TARGET $variant);
        do
            local mref=""

            if [[ -z ${SCBI_MODVER[$mod]} ]]; then
                if [[ $variant != default ]] &&
                       ( [[ ${PROPAGATE_MODE} == both ]] ||
                             [[ ${PROPAGATE_MODE} == variant ]] );
                then
                    mref="/$variant"
                fi
                if [[ ${PROPAGATE_MODE} == both ]] ||
                       [[ ${PROPAGATE_MODE} == version ]];
                then
                    mref+=":$ref"
                fi
            else
                local s=${SCBI_MODVER[$mod]}
                local s_minfo=( $() )
                get-module-ref s_minfo $s $module
                local s_variant=${s_minfo[1]}
                local s_ref=${s_minfo[3]}

                if [[ $s_variant != default ]]; then
                    mref="/$s_variant"
                elif [[ ${PROPAGATE_MODE} == both ]] ||
                         [[ ${PROPAGATE_MODE} == variant ]];
                then
                    [[ $variant != default ]] &&
                        mref="/$variant"
                fi

                if [[ $s_ref != NONE ]]; then
                    mref+=":$s_ref"
                elif [[ ${PROPAGATE_MODE} == both ]] ||
                         [[ ${PROPAGATE_MODE} == version ]];
                then
                    [[ $s_ref == NONE ]] &&
                        mref+=":$ref"
                fi
            fi

            [[ -n $mref ]] &&
                echo 0 $mod $mod$mref
        done
    fi
}

function handle-plan-auto-variant()
{
    local M=$1

    local value=${SCBI_MODVER[$M]}

    local mod=${M/*=/}
    local FORMODULE=${M%$mod}
    FORMODULE=${FORMODULE%=}

    local module_info=()
    get-module-ref module_info $value $FORMODULE

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local ref=${module_info[3]}

    [[ $ref == "skip" ]] && return

    if [[ $variant =~ ^auto(\.|$) ]]; then
        local PKVER=( $(check-auto-variant $mod $FORMODULE) )

        local cnt=${#PKVER[*]}
        local gstatus=$SCBI_STATUS_VERSION_OK
        local gosver=0

        local last=$(( cnt - 1 ))

        for k in $(seq 0 4 $last); do
            local status=${PKVER[$k]}
            local osver=${PKVER[(( $k + 2 ))]}
            gstatus=$status
            if [[ $status != $SCBI_STATUS_VERSION_OK ]]; then
                break
            else
                gosver=$osver
            fi
        done

        SCBI_AUTO_FILE=$(mktemp -p /dev/shm)

        {
            if [[ $ref == NONE ]]; then
                local ref=""
            else
                local ref=" $ref"
            fi

            if [[ $gstatus == $SCBI_STATUS_VERSION_OK ]]; then
                #  replaces all variants by a single "native"
                #  and use the new version for this module
                value=${value/\/auto*([.a-zA-Z])/\/native}
                echo 0 $M "${value%:*}${gosver+:$gosver}"
                echo 1 $M "%B%t$M%c%g$ref%c using %B%tnative%c variant"
            elif [[ $gstatus != $SCBI_ERROR_HOOK_NOT_FOUND ]]; then
                #  remove "auto" from the list of variants, or replace
                #  it with FORMODULE if defined and auto is the only
                #  variant specified. This ensure that a separate
                #  directory is used for the build.
                value=${value/\/auto\./\/}

                if [[ -z $FORMODULE ]]; then
                    value=${value/\/auto}
                else
                    local FMOD=${FORMODULE//[-._]/}
                    value=${value/\/auto/\/$FMOD}
                fi
                echo 0 $M "$value"
                echo 1 $M "%B%t$M%c%g$ref%c using %B%tstandard%c variant"
            fi

            #  The explanation of the choice above

            for k in $(seq 0 4 $last); do
                local status=${PKVER[$k]}
                local mver=${PKVER[(($k + 1))]}
                local osver=${PKVER[(( $k + 2 ))]}
                local pkg=${PKVER[(( $k + 3 ))]}

                if [[ $status == $SCBI_STATUS_PKG_NOT_INSTALLED ]]; then
                    if [[ $osver == 0 ]]; then
                        echo 1 $M "  ↳ $pkg not installed"
                    else
                        echo 1 $M "  ↳ $pkg $osver not installed"
                    fi
                elif [[ $status == $SCBI_STATUS_PKG_NOT_FOUND ]]; then
                    echo 1 $M "  ↳ unknown dependency $pkg"
                elif [[ $status == $SCBI_STATUS_VERSION_NOK ]]; then
                    if [[ -z $ref ]]; then
                        echo 1 $M "  ↳ $pkg $mver installed $osver"
                    else
                        echo 1 $M "  ↳ $pkg $osver installed"
                    fi
                elif [[ $status == $SCBI_STATUS_VERSION_OK ]]; then
                    echo 1 $M "  ↳ $pkg $osver used"
                elif [[ $status == $SCBI_ERROR_HOOK_NOT_FOUND ]]; then
                    echo 2 $M "$M auto mode must define a native variant"
                fi
            done
        } > $SCBI_AUTO_FILE

        cat $SCBI_AUTO_FILE
        rm $SCBI_AUTO_FILE
    fi
}

function parallel-do()
{
    local FCT=$1
    local MAX=$2
    shift 2

    local N=0

    for P in $*; do
        $FCT $P &
        (( n++ ))
        if [[ $n -gt $MAX ]]; then
            wait
            n=0
        fi
    done

    wait
}

function rewrite-module-plan()
{
    local eres=0

    #  Rewrite plan for auto-variant

    while read E K V; do
        if [[ $E == 0 ]]; then
            SCBI_MODVER[$K]=$V
        elif [[ $E == 1 ]]; then
            ilog $K "$V"
        else
            elog $K "$V"
            eres=1
        fi
    done < <( parallel-do handle-plan-auto-variant \
                          $(( $SCBI_JOBS + $SCBI_HALF_JOBS )) ${!SCBI_MODVER[@]} )

    #  Rewrite plan for meta-module (this is done recursively until there
    #  is no new module plan entry rewritten.

    declare _MOREMOD=( ${!SCBI_MODVER[@]} )

    while [[ ${#_MOREMOD[@]} > 0 ]]; do
        declare _NEWMOD=()

        while read E K V; do
            if [[ $E == 0 ]]; then
                SCBI_MODVER[$K]=$V
                _NEWMOD+=($K)
            elif [[ $E == 1 ]]; then
                ilog $K "$V"
            else
                elog $K "$V"
                eres=1
            fi
        done < <( parallel-do handle-plan-meta-module \
                              $(( $SCBI_JOBS + $SCBI_HALF_JOBS )) ${_MOREMOD[@]} )

        _MOREMOD=( ${_NEWMOD[@]} )
    done

    wait

    unset _MOREMOD
    unset _NEWMOD

    return $eres
}

############################## display-build-plan
#
#

function _internal_list-build-plan()
{
    local module=""

    for module in ${!SCBI_MODVER[*]}; do
        local FM=${module%=*}
        if [[ "$FM" != "$module" ]]; then
            echo "@for $FM use ${SCBI_MODVER[$module]}"
        else
            echo "${SCBI_MODVER[$module]}"
        fi
    done
}

function display-build-plan()
{
    echo "There is ${#SCBI_MODVER[*]} module(s) in the plan"
    _internal_list-build-plan
}

############################## record-build-plan
#
#

function record-build-plan()
{
    local MODULE=$1
    local VARIANT=$2

    local PLAN=$SCBI_BDIR/$MODULE/$SCBI_TARGET-$VARIANT/logs/build-plan

    echo "# build plan"        > $PLAN
    _internal_list-build-plan >> $PLAN
}

############################## set-module-ref
#
# Set a module reference into the build plan only if this reference a
# specific version or is forced.

function set-module-ref()
{
    #  full module reference is name[/variant][:version]
    local MODREF="$1"

    local sminfo=()
    parse-module-ref sminfo $MODREF

    local module=${sminfo[0]}
    local variant=${sminfo[1]}
    local kind=${sminfo[2]}
    local ref=${sminfo[3]}

    if [[ "$variant" != "default" ]]   \
         || [[ "${kind^^}" != "NONE" ]]   \
         || [[ "${ref^^}" != "NONE" ]];
    then
        if [[ "$ref" == "force" ]]; then
            SCBI_MODVER[$module]=$module/$variant
        else
            SCBI_MODVER[$module]=${MODREF/*=/}
        fi
    fi
}

############################## check-auto-variant
#
# Returns for each OS dependencies:
#
#   STATUS
#   REQUIRED_VERSION
#   OS_VERSION
#   PACKAGE

function check-auto-variant()
{
    local MODULE=$1
    local FORMODULE=${2:-"@root"}

    if [[ -f $SCBI_PLUGINS/$MODULE ]]; then
        #  Check external dependencies for native-depends

        (
            source $SCBI_PLUGINS/$MODULE

            fn-exists $MODULE-native-depends

            if [[ $? != 0 ]]; then
                #  Fatal error, stop now
                echo $SCBI_ERROR_HOOK_NOT_FOUND
                echo 0
                echo 0
                echo NONE
                exit 2
            fi

            for dmodule in $(get-all-depends $MODULE native depends); do
                if [[ ! -f $SCBI_PLUGINS/$dmodule ]]; then
                    #  If OS dependency on a native variant has version set
                    #  to v (for example libtbb:[v]) we want this dependency
                    #  to be checking the module's version requested.

                    if [[ ${dmodule#*:} == "[v]" ]]; then
                        dmodule=${dmodule%:*}

                        local module_info=()
                        get-module-ref module_info $MODULE $FORMODULE
                        local ref=${module_info[3]}

                        if [[ $ref != NONE ]]; then
                            dmodule=${dmodule}:$ref
                        fi
                    fi

                    # 4 items per line: status module-version package-version package-name
                    check-pkg-status $dmodule
                fi
            done
        )

    else
        #  No module definition, cannot have a native variant, error will
        #  be reported upward.
        echo $SCBI_ERROR_PLUGIN_NOT_FOUND
        echo 0
        echo 0
        echo NONE
        return 1
    fi
}
