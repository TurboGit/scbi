#
# Support for VCS
#
#    - the repositories are checked-out in $SCBI_BDIR/.vcs
#
#    - a symbolic link is created in the directory for the module
#      under name vcs
#
# This is done so to be able to share the repository across multiple
# modules.

############################## svn-co

function svn-co()
{
    local PROXY=$1
    local URL=$2
    local OPTIONS=$3
    local NAME=$4
    local DIR=$5

    local REPO=${DIR:-$(basename $URL)}

    (
        set-proxy $PROXY

        mkdir -p $SCBI_BDIR/.vcs
        cd $SCBI_BDIR/.vcs &&
        if [[ ! -d $REPO ]]; then
            svn co $URL $REPO
        else
            cd $REPO
            [[ ! -d .svn ]] &&
                ilog build error: $(pwd) not a subversion repository &&
                exit 1
            svn update
        fi &&
        cd $SCBI_BDIR/$NAME &&
        ln -s ../.vcs/$REPO vcs
    )
}

############################## git-co

function git-co()
{
    local PROXY=$1
    local URL=$2
    local OPTIONS=$3
    local NAME=$4
    local DIR=$5
    local REPO=${DIR:-$(basename $URL .git)}

    local GOPTS1=""
    local GOPTS2=""

    if [[ ! -z ${OPTIONS##*no-recursive*} ]]; then
        GOPTS1="--recursive"
        GOPTS2="--recurse-submodules"
    fi

    (
        set-proxy $PROXY

        mkdir -p $SCBI_BDIR/.vcs
        cd $SCBI_BDIR/.vcs &&
        if [[ ! -d $REPO ]]; then
            git clone $GOPTS1 $URL $REPO
        else
            cd $REPO
            [[ ! -d .git ]] &&
                ilog build error: $(pwd) not a git repository &&
                exit 1
            # we set the URL in case the repo has been relocated
            git remote set-url origin $URL
            git fetch $GOPTS2
        fi &&
        cd $SCBI_BDIR/$NAME &&
        ln -s ../.vcs/$REPO vcs
    )
}

############################## hg-co

function hg-co()
{
    local PROXY=$1
    local URL=$2
    local OPTIONS=$3
    local NAME=$4
    local DIR=$5

    local REPO=${DIR:-$(basename $URL)}

    (
        set-proxy $PROXY

        mkdir -p $SCBI_BDIR/.vcs
        cd $SCBI_BDIR/.vcs &&
        if [[ ! -d $REPO ]]; then
            hg clone $URL $REPO
        else
            cd $REPO
            [[ ! -d .git ]] &&
                ilog build error: $(pwd) not a git repository &&
                exit 1
            # we set the URL in case the repo has been relocated
            hg pull
        fi &&
        cd $SCBI_BDIR/$NAME &&
        ln -s ../.vcs/$REPO vcs
    )
}

############################## git-branch

function git-branch()
{
    local PROXY=$1
    local OPTIONS=$2
    local MODULE=$3
    local BRANCH=$4
    local DIR=$5

    local BUILDB=scbi

    (
        set-proxy $PROXY

        cd $SCBI_BDIR/$MODULE/vcs

        # first, let's update the repository

        git checkout master
        git fetch

        # if no branch specified use master

        if [[ $BRANCH == NONE ]]; then
            BRANCH=master
        fi

        # check that $BRANCH is a known branch

        git show-ref --verify --quiet refs/remotes/origin/$BRANCH

        if [[ $? == 1 ]]; then
            git show-ref --verify --quiet refs/heads/$BRANCH
            if [[ $? == 1 ]]; then
                # maybe a tag then
                git show-ref --verify --quiet refs/tags/$BRANCH

                if [[ $? == 1 ]]; then
                    # check for a sha1
                    git rev-parse -q --verify $BRANCH^{commit} &> /dev/null

                    if [[ $? == 1 ]]; then
                        # version not found
                        ilog build "error: switching git branch"
                        return 1
                    fi
                fi
                BR=$BRANCH
            else
                BR=refs/heads/$BRANCH
            fi
        else
            BR=refs/remotes/origin/$BRANCH
        fi

        # create the build branch if needed

        git show-ref --verify --quiet refs/heads/$BUILDB

        if [[ $? == 1 ]]; then
            git branch $BUILDB
        fi

        # move to build branch, and initialize it

        git checkout $BUILDB

        CUR=$(git rev-parse --short HEAD)

        git reset --hard $BR

        NEW=$(git rev-parse --short HEAD)

        if [[ "$CUR" != "$NEW" ]]; then
            send-mail "scbi: $MODULE updated $CUR..$NEW"
            ilog $MODULE "scbi: $MODULE updated $CUR..$NEW"
        fi

        [[ ! -z ${OPTIONS##*no-recursive*} ]] && [[ -f .gitmodules ]] &&
            git submodule update --init --recursive || true
    )
}

############################## hg-branch

function hg-branch()
{
    local PROXY=$1
    local OPTIONS=$2
    local MODULE=$3
    local BRANCH=$4
    local DIR=$5

    local BUILDB=scbi

    (
        set-proxy $PROXY

        cd $SCBI_BDIR/$MODULE/vcs

        # first, let's update the repository

        hg pull

        # if no branch specified use default

        if [[ $BRANCH == NONE ]]; then
            BRANCH=default
        fi

        hg branch -f $BRANCH

        if [[ $? != 0 ]]; then
            ilog build "error: switching mercurial branch"
            return 1
        fi
    )
}

############################## svn-branch

function svn-branch()
{
    local PROXY=$1
    local OPTIONS=$2
    local MODULE=$3
    local BRANCH=$4
    local DIR=$5

    local BUILDB=scbi

    #  This hook works only for standard Subversion layout, that is
    #  with trunk/branches/tags at the root.

    (
        cd $SCBI_BDIR/$MODULE

        if [[ $BRANCH == NONE ]]; then
            if [[ ! -z $DIR ]] && [[ -d vcs/trunk/$DIR ]]; then
                ln -s vcs/trunk/$DIR src
	    elif [[ -d vcs/trunk ]]; then
                ln -s vcs/trunk src
            else
                ln -s vcs src
            fi

        elif [[ ! -z $DIR ]] && [[ -d vcs/branches/$BRANCH/$DIR ]]; then
            ln -s vcs/branches/$BRANCH/$DIR src

        elif [[ -d vcs/branches/$BRANCH ]]; then
            ln -s vcs/branches/$BRANCH src

        elif [[ ! -z $DIR ]] && [[ -d vcs/tags/$BRANCH/$DIR ]]; then
            ln -s vcs/tags/$BRANCH/$DIR src

        elif [[ -d vcs/tags/$BRANCH ]]; then
            ln -s vcs/tags/$BRANCH src

        else
            ilog build "error: switching subversion branch $BRANCH"
            return 1
        fi
    )
}

############################## get-vcs-data

function get-vcs-data()
{
    local module=$1
    local variant=$2

    VCS_FUNCTION=$(get-hook $module $variant vcs)
    VCS_FUNCTION=${VCS_FUNCTION:=${module}-vcs}

    #  check first for module specifc VCS variant

    VAR=SCBI_${module//-/_}_VCS_VARIANT

    if [[ "${!VAR}" != "" ]]; then
        fn-exists $module-${!VAR}-vcs
        if [[ $? = 0 ]]; then
            VCS_FUNCTION=$module-${!VAR}-vcs
        else
            elog build "error: vcs specific function for $module not found."
            exit 1
        fi
    elif [[ "${SCBI_VCS_VARIANT}" != "" ]]; then
        fn-exists $module-${SCBI_VCS_VARIANT}-vcs
        if [[ $? = 0 ]]; then
            VCS_FUNCTION=$module-${SCBI_VCS_VARIANT}-vcs
        fi
    fi

    fn-exists $VCS_FUNCTION

    if [[ $? = 0 ]]; then
        $VCS_FUNCTION
    else
        return 1
    fi
}

############################## get-vcs

function get-vcs()
{
    local PREFIX=$1
    local TARGET=$2
    local MODREF=$3

    #  get module information

    local module_info=( $(get-module-ref $MODREF) )

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}
    local ref=${module_info[3]}

    #  get vcs information

    vcs=( $(get-vcs-data $module $variant) )

    local VCS_PROXY=${vcs[0]}
    local VCS_OPTIONS=${vcs[1]}
    local VCS_NAME=${vcs[2]}
    local VCS_URL=${vcs[3]}
    local VCS_DIR=${vcs[4]}

    local res=0

    case $VCS_NAME in
        git)
            git-co $VCS_PROXY $VCS_URL $VCS_OPTIONS \
		$module "$VCS_DIR" > $log 2>&1

            if [[ ! $? = 0 ]]; then
		check-tool svn
		if [[ $? == 0 ]]; then
                    ilog build "error: cannot get sources from $VCS_URL"
		else
                    ilog build "error: tool git not installed"
		fi

                exit 1
            fi

            if [[ $kind != DEV ]]; then
                git-branch $VCS_PROXY $VCS_OPTIONS \
		    $module $ref "$VCS_DIR" > $log 2>&1

                if [[ ! $? = 0 ]]; then
                    ilog build "error: cannot switch to branch $ref"
                    exit 1
                fi
            fi
            ;;

        hg|mercurial)
            hg-co $VCS_PROXY $VCS_URL $VCS_OPTIONS \
		$module "$VCS_DIR" > $log 2>&1

            if [[ ! $? = 0 ]]; then
		check-tool hg
		if [[ $? == 0 ]]; then
                    ilog build "error: cannot get sources from $VCS_URL"
		else
                    ilog build "error: tool hg not installed"
		fi

                exit 1
            fi

            if [[ $kind != DEV ]]; then
                hg-branch $VCS_PROXY $VCS_OPTIONS \
		    $module $ref "$VCS_DIR" > $log 2>&1

                if [[ ! $? = 0 ]]; then
                    ilog build "error: cannot switch to branch $ref"
                    exit 1
                fi
            fi
            ;;

        svn|subversion)
            svn-co $VCS_PROXY $VCS_URL $VCS_OPTIONS \
		$module "$VCS_DIR" > $log 2>&1

            if [[ ! $? = 0 ]]; then
		check-tool svn
		if [[ $? == 0 ]]; then
                    ilog build "error: cannot get sources from $VCS_URL"
		else
                    ilog build "error: tool svn not installed"
		fi

                exit 1
            fi

            if [[ $kind != DEV ]]; then
                svn-branch $VCS_PROXY $VCS_OPTIONS \
		    $module $ref "$VCS_DIR" > $log 2>&1

                if [[ ! $? = 0 ]]; then
                    ilog build "error: cannot switch to branch $ref"
                    exit 1
                fi
            fi
            ;;

        *)
            ilog build "error: unknown vcs $VCS_NAME"
            res=1
            ;;
    esac

    return $res
}

############################## vcs-build-id

function vcs-build-id()
{
    local PREFIX=$1
    local TARGET=$2
    local MODREF=$3
    local vcs=$4

    [[ ! -d $vcs ]] && echo $MODREF | get-md5 && return 0

    local vid=$(
        cd $vcs

        if [[ -d .git ]]; then
            local gver=$(git rev-list -1 HEAD)
            local gdif=$( ( git diff HEAD ;
                             git submodule --quiet foreach --recursive \
                                 git diff HEAD ) | md5sum | cut -d' ' -f1)

            echo $gver$gdif

        elif [[ -d .svn ]]; then
            echo "r$(LANG=C svn info | \
                  sed -n -e '/^Revision: \([0-9]*\).*$/s//\1/p')"

        elif [[ -d .hg ]]; then
            local hver=$(hg identify --num)
            local hdif=$(hg diff | tail -n+4 | md5sum | cut -d' ' -f1)

            echo $hver$hdif

        else
            echo 0
        fi
          )

    get-build-id $PREFIX $TARGET $MODREF $vid
}
