#
# Support for VCS
#
#    - the repositories are checked-out in $BDIR/.vcs
#
#    - a symbolic link is created in the directory for the module
#      under name vcs
#
# This is done so to be able to share the repository across multiple
# modules.

############################## svn-co

function svn-co()
{
    local URL=$1
    local NAME=$2
    local REPO=$(basename $URL)

    (
        mkdir -p $BDIR/.vcs
        cd $BDIR/.vcs &&
        if [ ! -d $REPO ]; then
            svn co $URL $REPO
        else
            cd $REPO
            [ ! -d .svn ] &&
                ilog build error: $(pwd) not a subversion repository &&
                exit 1
            svn update
        fi &&
        cd $BDIR/$NAME &&
        ln -s ../.vcs/$REPO vcs
    )
}

############################## git-co

function git-co()
{
    local URL=$1
    local NAME=$2
    local REPO=$(basename $URL .git)

    (
        mkdir -p $BDIR/.vcs
        cd $BDIR/.vcs &&
        if [ ! -d $REPO ]; then
            git clone --recursive $URL $REPO
        else
            cd $REPO
            [ ! -d .git ] &&
                ilog build error: $(pwd) not a git repository &&
                exit 1
            # we set the URL in case the repo has been relocated
            git remote set-url origin $URL
            git fetch --recurse-submodules
        fi &&
        cd $BDIR/$NAME &&
        ln -s ../.vcs/$REPO vcs
    )
}

############################## hg-co

function hg-co()
{
    local URL=$1
    local NAME=$2
    local REPO=$(basename $URL .git)

    (
        mkdir -p $BDIR/.vcs
        cd $BDIR/.vcs &&
        if [ ! -d $REPO ]; then
            hg clone $URL $REPO
        else
            cd $REPO
            [ ! -d .git ] &&
                ilog build error: $(pwd) not a git repository &&
                exit 1
            # we set the URL in case the repo has been relocated
            hg pull
        fi &&
        cd $BDIR/$NAME &&
        ln -s ../.vcs/$REPO vcs
    )
}

############################## git-branch

function git-branch()
{
    local MODULE=$1
    local BRANCH=$2
    local BUILDB=scbi

    (
        cd $BDIR/$MODULE/vcs

        # first, let's update the repository

        git checkout master
        git fetch

        # if no branch specified use master

        if [ $BRANCH == NONE ]; then
            BRANCH=master
        fi

        # check that $BRANCH is a known branch

        git show-ref --verify --quiet refs/remotes/origin/$BRANCH

        if [ $? == 1 ]; then
            git show-ref --verify --quiet refs/heads/$BRANCH
            if [ $? == 1 ]; then
                # maybe a tag then
                git show-ref --verify --quiet refs/tags/$BRANCH

                if [ $? == 1 ]; then
                    # check for a sha1
                    git rev-parse -q --verify $BRANCH^{commit} &> /dev/null

                    if [ $? == 1 ]; then
                        # version not found
                        ilog build "error: switching git branch"
                        return 1
                    fi
                fi
                BR=$BRANCH
            else
                BR=refs/heads/$BRANCH
            fi
        else
            BR=refs/remotes/origin/$BRANCH
        fi

        # create the build branch if needed

        git show-ref --verify --quiet refs/heads/$BUILDB

        if [ $? == 1 ]; then
            git branch $BUILDB
        fi

        # move to build branch, and initialize it

        git checkout $BUILDB

        CUR=$(git rev-parse --short HEAD)

        git reset --hard $BR

        NEW=$(git rev-parse --short HEAD)

        if [ "$CUR" != "$NEW" ]; then
            send-mail "scbi: $MODULE updated $CUR..$NEW"
            ilog $MODULE "scbi: $MODULE updated $CUR..$NEW"
        fi

        [ -f .gitmodules ] && git submodule update --init --recursive || true
    )
}

############################## hg-branch

function hg-branch()
{
    local MODULE=$1
    local BRANCH=$2
    local BUILDB=scbi

    (
        cd $BDIR/$MODULE/vcs

        # first, let's update the repository

        hg pull

        # if no branch specified use default

        if [ $BRANCH == NONE ]; then
            BRANCH=default
        fi

        hg branch -f $BRANCH

        if [ $? != 0 ]; then
            ilog build "error: switching mercurial branch"
            return 1
        fi
    )
}

############################## svn-branch

function svn-branch()
{
    local MODULE=$1
    local BRANCH=$2

    #  ??? call $module-vcs and get the URL for branches ${vcs[2]}

    ilog build "error: switching branch not supported for subversion"
    return 1
}

############################## get-vcs

function get-vcs()
{
    local VCS=$1
    local URL=$2
    local module=$3
    local kind=$4
    local version=$5

    local res=0

    case $VCS in
        git)
            git-co $URL $module > $log 2>&1

            if [[ ! $? = 0 ]]; then
                ilog build "error: cannot get sources from $URL"
                exit 1
            fi

            if [ $kind != DEV ]; then
                git-branch $module $version > $log 2>&1

                if [[ ! $? = 0 ]]; then
                    ilog build "error: cannot switch to branch $version"
                    exit 1
                fi
            fi
            ;;

        hg|mercurial)
            hg-co $URL $module > $log 2>&1

            if [[ ! $? = 0 ]]; then
                ilog build "error: cannot get sources from $URL"
                exit 1
            fi

            if [ $kind != DEV ]; then
                hg-branch $module $version > $log 2>&1

                if [[ ! $? = 0 ]]; then
                    ilog build "error: cannot switch to branch $version"
                    exit 1
                fi
            fi
            ;;

        svn|subversion)
            svn-co $URL $module > $log 2>&1

            if [[ ! $? = 0 ]]; then
                ilog build "error: cannot get sources from $URL"
                exit 1
            fi

            if [ $kind != DEV -a $version != NONE ]; then
                svn-branch $module $version > $log 2>&1

                if [[ ! $? = 0 ]]; then
                    ilog build "error: cannot switch to branch $version"
                    exit 1
                fi
            fi

            ;;
        *)
            ilog build "error: unknown vcs $VCS"
            res=1
            ;;
    esac

    return $res
}

############################## vcs-build-id

function vcs-build-id()
{
    local PREFIX=$1
    local TARGET=$2
    local MODREF=$3
    local vcs=$4

    [ ! -d $vcs ] && return 0

    local vid=$(
        cd $vcs

        if [ -d .git ]; then
            gver=$(git rev-list -1 HEAD)

            git diff --exit-code --quiet HEAD

            [[ $? == 1 ]] && gdif=$(git diff HEAD | md5sum | cut -d' ' -f1)

            echo $gver$gdif

        elif [ -d .svn ]; then
            echo "r$(LANG=C svn info | \
                  sed -n -e '/^Revision: \([0-9]*\).*$/s//\1/p')"

        elif [ -d .hg ]; then
            hver=$(hg identify --num)
            hdif=$(hg diff | tail -n+4 | md5sum | cut -d' ' -f1)
            echo $hver$hdif

        else
            echo 0
        fi
          )

    get-build-id $PREFIX $TARGET $MODREF $vid
}
