
#  associative array given the status of a module, $SCBI_LOADED[$module] is
#  set to yes when module is loaded and $SCBI_LOADED[$module.$variant] is
#  set to meta (for a meta-module) / final (for a standard module).
declare -A SCBI_LOADED

declare -A SCBI_MODVER

############################## fn-exists
# check wether a function is defined

function fn-exists()
{
    declare -f $1 > /dev/null
}

############################## copy-fonction

function copy-function()
{
    declare -F "$1" > /dev/null || return 1
    local func="$(declare -f "$1")"
    eval "${2}(${func#*\(}"
}

############################## get-config-options

function get-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local PLUGIN=$(basename $(caller | cut -d' ' -f2))

    plugin-call-variant-hooks $PLUGIN config-options $PREFIX $TARGET $VARIANT
}

############################## is-enabled
# check wether a feature is enabled (see option --enable-<feature>)

function is-enabled()
{
    local VAR=SCBI_${1/-/_}_SET
    local THEN=$2
    local ELSE=$3

    if [[ "${!VAR}" = "true" ]]; then
        if [[ -z $THEN ]]; then
            echo "yes"
        else
            echo $THEN
        fi
        return 0
    else
        if [[ -n $ELSE ]]; then
            echo $ELSE
        fi
        return 1
    fi
}

############################## get-hook-value

function get-hook-value()
{
    local MODULE=$1
    local VARIANT=$2
    local HOOK=$3

    local FCT=$(get-hook $MODULE $VARIANT $HOOK)

    local RESULT=""

    if [[ -n $FCT ]]; then
        RESULT=$($FCT $SCBI_BDIR/$MODULE/$SCBI_TARGET-$VARIANT/install \
                      $SCBI_TARGET $VARIANT)
    fi

    echo $RESULT
}

############################## is-hook-true

function is-hook-true()
{
    local MODULE=$1
    local VARIANT=$2
    local HOOK=$3
    local DEFAULT=$4

    local VALUE=$(get-hook-value $MODULE $VARIANT $HOOK)
    VALUE=${VALUE:-$DEFAULT}
    VALUE=${VALUE^^}

    [[ ${VALUE} = "TRUE" ]] || [[ ${VALUE} == "YES" ]]
}

############################## last-modified-directory
# returns the newest (last modified) directory matching pattern

function last-modified-directory()
{
    local PATTERN="$1"

    ls -td $PATTERN 2> /dev/null | head -1
}

############################## check-os-file
# check for a specific file in a set of hint directories, return full pathname
#
# get-os-file <FILENAME> <PATH1> <PATH2> ...

function get-os-file()
{
    local FILENAME=$1
    shift

    while [[ -n "$1" ]]; do
        F="$1/$FILENAME"
        RES=$(ls $F 2>&1 > /dev/null)
        if [[ $? == 0 ]]; then
            FILENAME=$F
            break
        fi
        shift
    done

    echo $FILENAME
}

############################## get-os-lib
# check for a specific lib, return full pathname
#
# get-os-lib <FILENAME>

function get-os-lib()
{
    local F=$1
    local BN=${F##*/}

    local R=$(get-os-file "$F" \
                          "/usr/lib*/$SCBI_TARGET" \
                          "/usr/lib*/$SCBI_TARGET/*" \
                          "/usr/lib*" \
                          "/usr/lib*/*" \
                          "/usr/lib*/*/lib*")

    if [[ "$R" != "$F" ]] || [[ "$BN" == "$F" ]]; then
        echo $R
    else
        get-os-file "$BN" \
                    "/usr/lib*/$SCBI_TARGET" \
                    "/usr/lib*/$SCBI_TARGET/*" \
                    "/usr/lib*" \
                    "/usr/lib*/*" \
                    "/usr/lib*/*/lib*"
    fi
}

function get-os-lib-dir()
{
    local R=$(get-os-lib "$1")
    echo ${R%/*}
}

############################## get-os-inc
# check for a specific include, return full pathname
#
# get-os-inc <FILENAME>

function get-os-inc()
{
    local F=$1
    local BN=${F##*/}

    local R=$(get-os-file "$F" \
                          "/usr/include/$SCBI_TARGET" \
                          "/usr/include" \
                          "/usr/include/$SCBI_TARGET/*" \
                          "/usr/include/*")

    if [[ "$R" != "$F" ]] || [[ "$BN" == "$F" ]]; then
        echo $R
    else
        get-os-file "$BN" \
                    "/usr/include/$SCBI_TARGET" \
                    "/usr/include" \
                    "/usr/include/$SCBI_TARGET/*" \
                    "/usr/include*/*"
    fi
}

function get-os-inc-dir()
{
    local R=$(get-os-inc "$1")
    echo ${R%/*}
}

############################## get-os-bin
# check for a specific binary, return full pathname
#
# get-os-bin <FILENAME>

function get-os-bin()
{
    get-os-file "$1" \
                "/usr/bin*" "/usr/lib*/*/bin"
}

function get-os-bin-dir()
{
    local R=$(get-os-bin "$1")
    echo ${R%/*}
}

############################## split all variants
# returns all variants separated with spaces, usage:
#
# for v in $(all-variants $VARIANT); do
#    ...
# done

function all-variants()
{
    local VARIANTS=$1
    if [[ "$VARIANTS" != "default" ]]; then
        echo "${VARIANTS//./ }"
    fi
}

############################## has variant
# returns true if variants exists
#
#  if has-variant "v1.v2" v2; then
#     ...
#  fi

function has-variant()
{
    local VARIANTS=$1
    local VAR=$2

    for v in $(all-variants $VARIANTS); do
        if [[ $v == $VAR ]]; then
            return 0
        fi
    done
    return 1
}

############################## load-module
#
# load an SCBI build script

function load-module()
{
    local MODREF=$1

    local module_info=( $(get-module-ref $MODREF) )
    local module=${module_info[0]}
    local variant=${module_info[1]}

    local key="${module}.${variant}"

    if [[ -z "${SCBI_LOADED[$module]}" ]]; then
        if [[ -f $SCBI_PLUGINS/$module ]]; then
            source $SCBI_PLUGINS/$module
            SCBI_LOADED[$module]=yes
        elif [[ -n "${SCBI_MODULE_ALIAS[$module]}" ]]; then
            local MA=${SCBI_MODULE_ALIAS[$module]}

            if [[ -f $SCBI_PLUGINS/$MA ]]; then
                _inherit-plugin_internal $MA $module
            else
                return 1
            fi
        else
            return 1
        fi
    fi

    if [[ -z "${SCBI_LOADED[$key]}" ]]; then
        local MODS=$(plugin-call-variant-hooks \
                         $module modules $SCBI_PREFIX $SCBI_TARGET $variant)

        if [[ -z $MODS ]]; then
            SCBI_LOADED[$key]=final
        else
            SCBI_LOADED[$key]=meta
        fi
    fi

    return 0
}

############################## inherit-plugin

function _inherit-plugin_internal()
{
    local HPLUGIN=$1
    local PLUGIN=$2

    #  All hooks
    local SCBI_HOOKS="vcs|archive|env|build-env|depends|build-depends"
    local SCBI_HOOKS="$SCBI_HOOKS|out-of-tree|setup|config|build|install|prefix"

    load-module $HPLUGIN

    #  For each known & existing hook name, create a wrapper with the
    #  name of the caller plug-in.

    for hook in $(declare -F \
                      | cut -d' ' -f3 \
                      | grep -E "$HPLUGIN-.*($SCBI_HOOKS)");
    do
        H="function ${hook/$HPLUGIN/$PLUGIN}()"
        H="$H { $hook \$1 \$2 \$3 \$4 \$5 \$6 \$7; }"
        eval $H
    done
}

function inherit-plugin()
{
    local HPLUGIN=$1

    local CALLER=( $(caller) )

    #  Get the caller plug-in name
    local PLUGIN=$(basename ${CALLER[1]})

    _inherit-plugin_internal $HPLUGIN $PLUGIN
}

############################## get-version

function get-version()
{
    local CALLER=( $(caller) )

    #  Get the caller plug-in name
    local PLUGIN=$(basename ${CALLER[1]})

    local module_info=( $(get-module-ref $PLUGIN) )
    echo ${module_info[3]}
}

############################## parse-module-ref
#
# Returns an array with the following information:
# ( module ["default"|variant] [DEV|VERSION|BRANCH|NONE] [branch|version|NONE] )

function parse-module-ref()
{
    local MODREF=$1

    local module=""

    #  check version

    local ver=${MODREF#*:}

    if [[ $ver == $MODREF ]]; then
        #  no version specified
        local KIND=NONE
        local version=NONE
        module=$MODREF
    else
        #  version specified, check for tar version
        local vb=${ver:0:1}

        if [[ $ver = dev ]]; then
            KIND=DEV
            local version=dev
        elif [[ $vb = '#' ]]; then
            KIND=VERSION
            local version=${ver:1}
        else
            KIND=BRANCH
            local version=$ver
        fi

        module=${MODREF%%:*}
    fi

    local variant=${module#*/}

    if [[ $variant == $module ]]; then
        #  no variant
        variant=default
    else
        module=${module%/*}
    fi

    echo $module
    echo $variant
    echo $KIND
    echo $version
}

############################## get-module-ref
# Returns a module reference given the module name and possibly
# the parent package (for-module).

function get-module-ref()
{
    local MODREF=$1
    local FORMODULE=${2:-"@root"}

    #  Remove variants and version
    FORMODULE=${FORMODULE/:*/}
    FORMODULE=${FORMODULE/\/*/}

    local module_info=( $(parse-module-ref $MODREF) )
    local module=${module_info[0]}

    local modplan=${SCBI_MODVER[$FORMODULE"="$module]}

    if [[ -z $modplan ]]; then
        local modplan=${SCBI_MODVER[$module]}

        if [[ -n $modplan ]]; then
            module_info=( $(parse-module-ref $modplan) )
        fi
    else
        module_info=( $(parse-module-ref $modplan) )
    fi

    echo ${module_info[0]}
    echo ${module_info[1]}
    echo ${module_info[2]}
    echo ${module_info[3]}
}

############################## get-module-name
# Get full module name according to the module plan

function get-module-name()
{
    local MODREF=$1

    local module_info=( $(get-module-ref $MODREF $FORMODULE) )

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}
    local ref=${module_info[3]}

    [[ $variant != "default" ]] && module+="/$variant"
    [[ $ref != "NONE" ]] && module+=":$ref"

    echo $module
}

############################## with-variant
# parameters are the OS library for the native support

function with-variant()
{
    local VNAME=$1
    shift

    #  Get the caller plug-in name
    local PLUGIN=$(basename $(caller | cut -d' ' -f2))

    local module_info=( $(get-module-ref $PLUGIN) )
    local ref=${module_info[3]}

    #  Hooks with nop body & pre/post
    local SCBI_HOOKS=()

    for H in config build install; do
        local SCBI_HOOKS+=($H)
        local SCBI_HOOKS+=(pre-$H)
        local SCBI_HOOKS+=(post-$H)
        local SCBI_HOOKS+=(cross-$H)
        local SCBI_HOOKS+=(cross-pre-$H)
        local SCBI_HOOKS+=(cross-post-$H)
    done

    local H=""

    for hook in ${SCBI_HOOKS[*]}; do
        H="function $PLUGIN-$VNAME-$hook()"
        H="$H { true; }"
        eval $H
    done

    #  Hooks with nop body & pre/post
    local SCBI_HOOKS=()

    for H in env build-env build-depends; do
        local SCBI_HOOKS+=($H)
        local SCBI_HOOKS+=(common-$H)
        local SCBI_HOOKS+=(default-$H)
        local SCBI_HOOKS+=(cross-$H)
        local SCBI_HOOKS+=(common-cross-$H)
        local SCBI_HOOKS+=(default-cross-$H)
    done

    local H=""

    for hook in ${SCBI_HOOKS[*]}; do
        H="function $PLUGIN-$VNAME-$hook()"
        H="$H { true; }"
        eval $H
    done

    #  Hooks with NONE body
    local SCBI_HOOKS=( vcs archive )

    for hook in ${SCBI_HOOKS[*]}; do
        H="function $PLUGIN-$VNAME-$hook()"
        H="$H { echo NONE; echo NONE; echo NONE; echo NONE; }"
        eval $H
    done

    #  Hook prefix
    H="function $PLUGIN-$VNAME-prefix() { echo NONE; }"
    eval $H

    #  Hook depends/env
    H="function $PLUGIN-$VNAME-depends() { "
    local P="echo "
    while [[ -n "$1" ]]; do
        if [[ "$1" == "--env" ]]; then
            H="$H true; }"
            eval $H
            H="function $PLUGIN-$VNAME-env() { "
            P=""
        else
            mod=$1

            if [[ "${mod^^}" == "NONE" ]]; then
                H="$H $P;"
            else
                H="$H $P$mod;"
            fi
        fi
        shift
    done
    H="$H }"
    eval $H
}

############################## scbi-store-[get/set]-value scbi-store

function scbi-store-get-key()
{
    local KEY="$1"

    local VALUE=""
    local res=1
    local STORE_FILE=$SCBI_PLUGINS/.store

    if [[ -f $STORE_FILE ]]; then
        #  check KEY in store

        while read K V; do
            if [[ "$K" = "$KEY" ]]; then
                VALUE=$V
                res=0
                break;
            fi
        done < $STORE_FILE
    fi

    #  check if stdout (1) is a terminal

    if [[ -t 1 ]]; then
        echo $VALUE
    else
        echo -n $VALUE
    fi

    return $res
}

function scbi-store-set-key()
{
    local KEY="$1"
    local VALUE="$2"

    local STORE_FILE=$SCBI_PLUGINS/.store

    [[ ! -f $STORE_FILE ]] && touch $STORE_FILE

    declare -A STORE

    #  read store content, put it inside STORE

    while read K V; do
        STORE[$K]=$V
    done < $STORE_FILE

    STORE[$KEY]="$VALUE"

    #  clear content

    echo -n > $STORE_FILE

    #  write back content

    for K in "${!STORE[@]}"; do
        echo $K ${STORE[$K]} >> $STORE_FILE
    done

    unset STORE
    return 0
}

function scbi-store-list-keys()
{
    local KEY="$1"

    local VALUE=""
    local res=1
    local STORE_FILE=$SCBI_PLUGINS/.store

    if [[ -f $STORE_FILE ]]; then
        #  check KEY in store

        while read K V; do
            echo $K
        done < $STORE_FILE
    fi

    return 0
}

function scbi-store()
{
    local KEY="$1"
    local VALUE="$2"

    if [[ -z $KEY ]]; then
        scbi-store-list-keys
    elif [[ -z "$VALUE" ]]; then
        scbi-store-get-key "$KEY"
    else
        scbi-store-set-key "$KEY" "$VALUE"
    fi
}
############################## get-build-type

function get-build-type()
{
    local KIND=$1
    local DEFAULT=$2

    #  Get the caller plug-in name
    local PLUGIN=$(basename $(caller | cut -d' ' -f2))

    VAR_GENERIC=SCBI_${KIND}_BUILD_TYPE
    VAR_MODULE=SCBI_${PLUGIN//-/_}_BUILD_TYPE

    [[ -n ${!VAR_GENERIC} ]] && DEFAULT=${!VAR_GENERIC}
    [[ -n ${!VAR_MODULE} ]] && DEFAULT=${!VAR_MODULE}

    echo -n $DEFAULT
}

############################## define-var
#  Append/Prepend/Set VALUE to environment variable VAR,
#  does nothing if VALUE does not exists and VAR is PATH.

function define-var()
{
    local ACTION=$1
    local VAR=$2
    local VALUE=$3

    #  If adding to PATH, do so only if VALUE exists

    if [[ -d "$VALUE" ]] || [[ "${VAR}" != "PATH" ]]; then
        #  If SCBI_ENV_MODULE file exists, record the change into
        #  it. This is used internally by scbi to record .log/env.cmd
        #  for each module. This env file can then be sourced to replay
        #  the commands manually.

        local VALUE_EXISTS=no

        #  Separator of values in variable
        local SEP=":"

        if [[ "${SEP}${!VAR}${SEP}" == *"${SEP}${VALUE}${SEP}"* ]]; then
            #  If the value already exists, make sure it is first removed
            #  in the append/prepend mode to force it to be added at the
            #  start or end of the variable.
            VALUE_EXISTS=yes
        fi

        if [[ -n $SCBI_ENV_MODULE ]]; then
            echo define-var $ACTION $VAR \"$VALUE\" >> $SCBI_ENV_MODULE
        fi

        case $ACTION in
            SET|S)
                export $VAR="${VALUE}"
            ;;
            UNSET|U)
                unset $VAR
            ;;
            ADD)
                [[ $VALUE_EXISTS == no ]] &&
                    export $VAR="${VALUE}${!VAR:+$SEP}${!VAR}"
            ;;
            APPEND|A)
                [[ $VALUE_EXISTS == yes ]] &&
                    {
                        export $VAR=${!VAR/$SEP$VALUE}
                        export $VAR=${!VAR#$VALUE$SEP}
                    }
                export $VAR="${!VAR}${!VAR:+$SEP}${VALUE}"
            ;;
            PREPEND|P)
                [[ $VALUE_EXISTS == yes ]] &&
                    {
                        export $VAR=${!VAR/$SEP$VALUE}
                        export $VAR=${!VAR#$VALUE$SEP}
                    }
                export $VAR="${VALUE}${!VAR:+$SEP}${!VAR}"
            ;;
        esac
    fi

    true
}

#  Helper routines to prepend/append or set a variable

function prepend-to-var()
{
    local VAR=$1
    local VALUE=$2

    define-var PREPEND $VAR "$VALUE"
}

function append-to-var()
{
    local VAR=$1
    local VALUE=$2

    define-var APPEND $VAR "$VALUE"
}

function add-to-var()
{
    local VAR=$1
    local VALUE=$2

    define-var ADD $VAR "$VALUE"
}

function set-var()
{
    local VAR=$1
    local VALUE=$2

    define-var SET $VAR "$VALUE"
}

function unset-var()
{
    local VAR=$1

    define-var UNSET $VAR
}

############################## plugin-call-variant-hooks

function plugin-call-variant-hooks()
{
    local PLUGIN=$1
    local HOOK=$2
    local PREFIX=$3
    local TARGET=$4
    local VARIANT=$5

    shift 5

    local IFS
    unset IFS
    local ALLVARS=$(all-variants $VARIANT)

    #  Check common variant only for non native variant
    local CVAR=""
    [[ $VARIANT != native ]] && CVAR="common"

    local VARFOUND=no
    local found=0
    local FCT=""

    #  Always check the common hook, then the variants if defined
    #  or otherwise the default variant. Then if nothing found
    #  we call the main hook (no variant).

    local v

    for v in $CVAR ${ALLVARS:-default}; do
        found=0
        if [[ $SCBI_HOST != $SCBI_TARGET ]]; then
            FCT="$PLUGIN-$v-cross-$HOOK"
            fn-exists $FCT
            [[ $? = 0 ]] && found=1
        fi

        if [[ $found == 0 ]]; then
            FCT="$PLUGIN-$v-$HOOK"
            fn-exists $FCT
            [[ $? = 0 ]] && found=1
        fi

        if [[ $found == 1 ]]; then
            [[ $v != "common" ]] && [[ $v != "default" ]] && VARFOUND=yes
            $FCT $PREFIX $TARGET $VARIANT $*
        fi
    done

    if [[ $VARFOUND == no ]]; then
        found=0
        if [[ $SCBI_HOST != $SCBI_TARGET ]]; then
            FCT="$PLUGIN-cross-$HOOK"
            fn-exists $FCT
            [[ $? = 0 ]] && found=1
        fi

        if [[ $found == 0 ]]; then
            FCT="$PLUGIN-$HOOK"
            fn-exists $FCT
            [[ $? = 0 ]] && found=1
        fi

        [[ $found == 1 ]] && $FCT $PREFIX $TARGET $VARIANT $*
    fi
}

############################## call-variant-hooks

function call-variant-hooks()
{
    local HOOK=$1
    local PREFIX=$2
    local TARGET=$3
    local VARIANT=$4

    shift 4

    local PLUGIN=$(basename $(caller | cut -d' ' -f2))

    plugin-call-variant-hooks $PLUGIN $HOOK $PREFIX $TARGET $VARIANT $*
}

############################## check-versions
#
# Compare a and b as version strings. Rules:
# R1: a and b : dot-separated sequence of items. Items are numeric.
#     The last item can optionally end with letters, i.e., 2.5 or 2.5a.
# R2: Zeros are automatically inserted to compare the same number
#     of items, i.e., 1.0 < 1.0.1 means 1.0.0 < 1.0.1 => yes.
# R3: op can be '=' '==' '!=' '<' '<=' '>' '>=' (lexicographic).
# R4: Unrestricted number of digits of any item, i.e., 3.0003 > 3.0000004.
# R5: Unrestricted number of items.
# R6: Ignore trailing -X.Y versions (after dash) if present

function check-versions()
{
    local a=$1
    local op="$2"
    local b=$3

    local al=${1##*.}
    local bl=${3##*.}

    while [[ $al =~ ^[[:digit:]] ]]; do al=${al:1}; done
    while [[ $bl =~ ^[[:digit:]] ]]; do bl=${bl:1}; done
    local ai=${a%$al} bi=${b%$bl}

    local ap=${ai//[[:digit:]]} bp=${bi//[[:digit:]]}
    ap=${ap//./.0} bp=${bp//./.0}

    local w=1 fmt=$a.$b x IFS=.
    for x in $fmt; do [ ${#x} -gt $w ] && w=${#x}; done
    fmt=${*//[^.]}; fmt=${fmt//./%${w}s}
    printf -v a $fmt $ai$bp; printf -v a "%s-%${w}s" $a $al
    printf -v b $fmt $bi$ap; printf -v b "%s-%${w}s" $b $bl

    case "$op" in
        '<=' | '>=' )
            [ "$a" ${op:0:1} "$b" ] || [ "$a" = "$b" ]
            ;;
        * )
            [ "$a" $op "$b" ]
            ;;
    esac
}

############################## load-runtime-module-plan
#
# Load a flat module plan. Used for replay script.

function load-runtime-module-plan()
{
    local PLAN=$1

    while read modref arg var; do
        if [[ "${modref:0:1}" != "#" ]]; then
            local module_info=( $(parse-module-ref $modref) )
            local module=${module_info[0]}
            SCBI_MODVER[$module]=${modref/*=/}
        fi
    done < $PLAN
}
