
############################## get-version-number
# return a 2 digits version number for $1

VERSION_OK=9999
VERSION_ERROR=-1

function get-version-number()
{
    echo -n "$1" | sed -e 's/[^0-9-]*\(\-\?[0-9]*\(\.[0-9]*\)\?\).*/\1/g'
}

############################## display-version

function display-version()
{
    version=$1

    if [ "$version" = "$VERSION_OK" ]; then
        echo latest
    elif [ "$version" = "$VERSION_ERROR" ]; then
        echo not found
    else
        echo $version
    fi
}

############################## gprbuild-project
# for testing if a project compile and link

function gprbuild-project()
{
    PRJ=$1

    (
        if [ $HOST == $TARGET ]; then
            gprbuild -p -q $PRJ -cargs -gnatwA
        else
            gprbuild -p -q --target=$TARGET $PRJ -cargs -gnatwA
        fi
    )  > /dev/null 2>&1
}

############################## check-tool

function check-tool()
{
    if [ -z "$(which $1)" ]; then
	echo Required tool $1 missing, please update the PATH
	return 1
    fi
    return 0
}

############################## check-tools

function check-tools()
{
    local res=0

    while [ "$1" != "" ]; do
	check-tool $1
	res=$(expr $res + $?)
	shift
    done
    return $res
}

############################## module-setup

function module-setup()
{
    local PREFIX=$1
    local TARGET=$2
    local OOT=$3

    if [ -h src -o -d src ]; then
        rsync -a --delete --exclude=".git" --exclude=".svn" \
            --exclude "*.o" --exclude "*.a" --exclude "*.dll" \
            --exclude "*.so" --exclude "*.so.*" --exclude "*.ali" \
            --link-dest=../src src/. $TARGET/src

        rm -f build/build build
        ln -s $TARGET build

        if [ "$OOT" = "yes" ]; then
            mkdir -p build/build
        else
            ln -s src build/build
        fi
    fi

    if [ -h local-vcs ]; then
        rsync -a --delete --exclude=".git" --exclude=".svn" \
            --exclude "*.o" --exclude "*.a" --exclude "*.dll" \
            --exclude "*.so" --exclude "*.so.*" --exclude "*.ali" \
            --link-dest=../local-vcs local-vcs/. $TARGET/src

        rm -f build/build build
        ln -s $TARGET build

        if [ "$OOT" = "yes" ]; then
            mkdir -p build/build
        else
            ln -s src build/build
        fi
    fi
}

############################## module-purge

function module-purge()
{
    local PREFIX=$1
    local TARGET=$2
    local OOT=$3

    if [ -h src -o -d src ]; then
        rsync -aH --exclude=".git" --exclude=".svn" --delete --delete-excluded \
            --exclude "*.o" --exclude "*.a" --exclude "*.dll" \
            --exclude "*.so" --exclude "*.so.*" --exclude "*.ali" \
            --link-dest=../src src/. $TARGET/src
    elif [ -d $TARGET ]; then
	rm -fr $TARGET
    fi
}

############################## display-file

function display-file()
{
    local file=$1

    echo File : $file
    cat $file
}

############################## get-tar

function get-tar()
{
    local module=$1
    local version=$2
    local res=0

    tar=( $($module-tar $version) )

    tarcp=${tar[0]}
    tarurl=${tar[1]}
    tarsrc=${tar[2]}

    #  The tarball is not present, try downloading it

    if [ ! -f $TARBALL/$tarsrc && "$tarcp" != "none" && $tarurl != "" ]; then
        $tarcp $tarurl/$tarsrc $TARBALL/ > $log 2>&1

        [[ ! $? = 0 ]] &&
            echo "error: cannot get tar: $tarcp" &&
            return 1
    fi

    [ ! -f $TARBALL/$tarsrc ] &&
        echo "error: tarball $tarsrc not found" &&
        return 1

    ilog build extract tarball $tarsrc

    [ ! -d $BDIR/$module ] && mkdir -p $BDIR/$module > $log 2>&1

    cd $BDIR/$module
    ( rm -fr tarsrc && mkdir -p tarsrc ) > $log 2>&1
    cd tarsrc

    tar xf $TARBALL/$tarsrc
    topdir=$(ls -d *)

    if [ -d "$topdir" ]; then
        mv $topdir/* .
        rmdir $topdir
        cd ..
    else
        echo Error, no top directory found.
        res=1
    fi

    return $res
}
