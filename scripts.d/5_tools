
#  associative array given the status of a module, $SCBI_LOADED[$module] is
#  set to yes when module is loaded and $SCBI_LOADED[$module.$variant] is
#  set to meta (for a meta-module) / final (for a standard module).
declare -A SCBI_LOADED

declare SCBI_RECTREE=()

############################## display-stacktrace
#
function display-stacktrace()
{
    local frame=0 LINE SUB FILE

    while read LINE SUB FILE < <(caller "$frame"); do
        printf '  %s @ %s:%s\n' "${SUB}" "${FILE}" "${LINE}" > $(tty)
        ((frame++))
    done
}

############################## fn-exists
# check wether a function is defined

function fn-exists()
{
    declare -f $1 > /dev/null
}

############################## get-hooks
# return the hook name for the given step. This can be the
# hook for a variant and/or cross build.

function get-hook()
{
    local MODULE=$1
    local VARIANT=$2
    local STEP=$3

    local HOOK=""

    if [[ $SCBI_HOST != $SCBI_TARGET ]]; then
        fn-exists $MODULE-$VARIANT-cross-$STEP
        if [[ $? = 0 ]]; then
            HOOK=$MODULE-$VARIANT-cross-$STEP
        else
            fn-exists $MODULE-cross-$STEP
            [[ $? = 0 ]] && HOOK=$MODULE-cross-$STEP
        fi
    fi

    if [[ -z $HOOK ]]; then
        fn-exists $MODULE-$VARIANT-$STEP
        if [[ $? = 0 ]]; then
            HOOK=$MODULE-$VARIANT-$STEP
        else
            fn-exists $MODULE-$STEP
            [[ $? = 0 ]] && HOOK=$MODULE-$STEP
        fi
    fi

    echo $HOOK
}

############################## is-enabled
# check wether a feature is enabled (see option --enable-<feature>)

function is-enabled()
{
    local VAR=SCBI_${1/-/_}_SET
    local THEN=$2
    local ELSE=$3

    if [[ "${!VAR}" = "true" ]]; then
        if [[ -z $THEN ]]; then
            echo "yes"
        else
            echo $THEN
        fi
        return 0
    else
        if [[ ! -z $ELSE ]]; then
            echo $ELSE
        fi
        return 1
    fi
}

############################## add-to-var
# add DIR to environment variable VAR, does nothing if DIR does not exists

function add-to-var()
{
    local VAR=$1
    local DIR=$2

    #  If adding to PATH, do so only if DIR exists

    if [[ -d "$DIR" ]] || [[ "${VAR}" != "PATH" ]] &&
           [[ ":${!VAR}:" != *":$DIR:"* ]];
    then
        #  If SCBI_ENV_MODULE file exists, record the change into
        #  it. This is used internally by scbi to record .log/env.cmd
        #  for each module. This env file can then be sourced to replay
        #  the commands manually.

        if [[ ! -z $SCBI_ENV_MODULE ]]; then
            echo add-to-var $VAR \"$DIR\" >> $SCBI_ENV_MODULE
        fi

        export $VAR="${DIR}${!VAR:+:}${!VAR}"
    fi
}

############################## get-version-number
# return a 3 digits version number for $1

VERSION_OK=9999
VERSION_ERROR=-1

function get-version-number()
{
    echo -n "$1" | sed -e 's/[^0-9-]*\(\-\?[0-9]*\(\.[0-9]*\)\?\(\.[0-9]*\)\?\).*/\1/g'
}

############################## display-version

function display-version()
{
    local VERSION=$1

    if [[ "$VERSION" = "$VERSION_OK" ]]; then
        echo latest
    elif [[ "$VERSION" = "$VERSION_ERROR" ]]; then
        echo not found
    else
        echo $VERSION
    fi
}

############################## gprbuild-project
# for testing if a project compile and link

function gprbuild-project()
{
    local PRJ=$1

    (
        if [[ $SCBI_HOST == $TARGET ]]; then
            gprbuild -p -q $PRJ -cargs -gnatwA
        else
            gprbuild -p -q --target=$TARGET $PRJ -cargs -gnatwA
        fi
    )  > /dev/null 2>&1
}

############################## display-file

function display-file()
{
    local FILE=$1

    echo File : $FILE
    cat $FILE
}

############################## get-md5

function get-md5()
{
    md5sum | cut -d' ' -f1
}

############################## load-module
#
# load an SCBI build script

function load-module()
{
    local MODREF=$1

    local module_info=( $(get-module-ref $MODREF) )
    local module=${module_info[0]}
    local variant=${module_info[1]}

    local key="${module}.${variant}"

    if [[ -z "${SCBI_LOADED[$module]}" ]]; then
        if [[ -f $SCBI_DEFS/$module ]]; then
            source $SCBI_DEFS/$module
            SCBI_LOADED[$module]=yes
        else
            return 1
        fi
    fi

    if [[ -z "${SCBI_LOADED[$key]}" ]]; then
        local FCT=$(get-hook $module $variant modules)

        if [[ -z $FCT ]]; then
            SCBI_LOADED[$key]=final
        else
            SCBI_LOADED[$key]=meta
        fi
    fi

    return 0
}

############################## is-meta-module
#
# return yes/0 if MODREF is a meta-module

function is-meta-module()
{
    local MODREF=$1

    local module_info=( $(get-module-ref $MODREF) )
    local module=${module_info[0]}
    local variant=${module_info[1]}

    local key="${module}.${variant}"

    if [[ -z "${SCBI_LOADED[$module]}" ]]; then
        load-module $MODREF
    fi

    if [[ "${SCBI_LOADED[$key]}" == "meta" ]]; then
        echo "yes"
        return 0
    else
        echo "no"
        return 1
    fi
}

############################## check-dependency-tree
#
# check whether a module is in the dependency tree

function check-dependency-tree()
{
    local MODULE=$1
    local res=1

    for m in ${SCBI_RECTREE[*]}; do
        if [[ $m = $MODULE ]]; then
            res=0
        fi
    done

    return $res
}

############################## push-dependency-tree
#
# push module in dependency tree

function push-dependency-tree()
{
    local MODULE=$1
    SCBI_RECTREE=( ${SCBI_RECTREE[*]} $MODULE )
}

############################## pop-dependency-tree
#
# pop last module pushed from dependency tree

function pop-dependency-tree()
{
    unset SCBI_RECTREE[${#SCBI_RECTREE[@]}-1]
}

############################## get-all-depends
#
# return each module in $module-$hook and also in each active variants
# $module-<variant>-$hook.

function get-all-depends()
{
    local MODULE="$1"
    local VARIANT="$2"
    local HOOK="$3"

    _internal_call-variant-hooks \
        $MODULE $HOOK "$SCBI_PREFIX" "$SCBI_TARGET" $VARIANT
    true
}

############################## for-all-modules

function _internal_for-all-modules()
{
    local CALLBACK=$1
    local WITH_META=$2
    local LEVEL=$3
    local WITHEXT=$4
    local IS_BUILD_DEPENDS=$5
    local MODREF=$6
    local FORMODULE=$7
    shift
    shift
    shift
    shift
    shift
    shift
    shift

    #  Check if recursive dependencies is needed

    [[ $DO_DEPS == yes-direct ]] && [[ $LEVEL -ge 2 ]] && return 0

    #  Get module information

    local module_info=( $(get-module-ref $MODREF $FORMODULE) )

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}
    local ref=${module_info[3]}

    [[ $ref = "skip" ]] && return 0

    #  Next level
    local NEXTL=$((LEVEL + 1))

    #  Check dependency graph to ensure there is no circularities

    check-dependency-tree $module

    if [[ $? = 0 ]]; then
        elog $module recursive dependencies detected

        local N=${#SCBI_RECTREE[*]}
        N=$(expr $N - 2)

        for i in $(seq 0 $N); do
            local j=$(expr $i + 1)
            elog $module " . " ${SCBI_RECTREE[$i]} '->' ${SCBI_RECTREE[$j]}
        done

        elog $module " . " ${SCBI_RECTREE[-1]} '->' $module
        exit 1
    fi

    #  Then load module

    local IS_META=false

    if [[ -z "${SCBI_CHECKED[$module]}" ]]; then
        SCBI_CHECKED[$module]=yes

        load-module $MODREF

        if [[ $? = 0 ]]; then
            push-dependency-tree $module

            FCT=$(get-hook $module $variant modules)

            if [[ ! -z $FCT ]]; then
                IS_META=true
            fi

            if [[ $WITH_META == true ]] && [[ $IS_META == true ]]; then
                #  check for meta-modules if present

                for dmodule in $($FCT $SCBI_PREFIX $SCBI_TARGET $variant); do
                    _internal_for-all-modules $CALLBACK $WITH_META $NEXTL \
                                              $WITHEXT false \
                                              $dmodule $module $@
                done

                $CALLBACK $FORMODULE $MODREF $LEVEL \
                          $IS_BUILD_DEPENDS false $IS_META $@

                pop-dependency-tree
                return
            fi

            #  Setup depends recursively if any

            for dmodule in $(get-all-depends $module $variant depends); do
                _internal_for-all-modules $CALLBACK $WITH_META $NEXTL \
                                          $WITHEXT false $dmodule $module $@
            done

            #  Setup build-depends recursively if any

            for dmodule in $(get-all-depends $module $variant build-depends); do
                _internal_for-all-modules $CALLBACK $WITH_META $NEXTL \
                                          $WITHEXT true $dmodule $module $@
            done

            $CALLBACK $FORMODULE $MODREF $LEVEL \
                      $IS_BUILD_DEPENDS false $IS_META $@

            pop-dependency-tree

        else
            #  module does not exists, this is an external dependency

            if [[ $WITHEXT == true ]]; then
                local PKGNAME=$(get-pkg-name $MODREF)
                [[ ! -z $PKGNAME ]] &&
                    $CALLBACK $FORMODULE $PKGNAME $LEVEL \
                              $IS_BUILD_DEPENDS true $IS_META $@
            else
                check-pkg $module:$ref || exit 1
            fi
        fi
    fi
}

#  Iterate over all modules
function for-all-modules()
{
    local CALLBACK=$1
    local MODREF=$2
    shift
    shift

    declare -A SCBI_CHECKED
    SCBI_RECTREE=()
    _internal_for-all-modules $CALLBACK false 0 false false $MODREF "@root" $@
}

#  Iterate over all modules and external dependencies
function for-all-modules-ext()
{
    local CALLBACK=$1
    local MODREF=$2
    shift
    shift

    declare -A SCBI_CHECKED
    SCBI_RECTREE=()
    _internal_for-all-modules $CALLBACK false 0 true false $MODREF "@root" $@
}

#  Iterate over all modules and meta-modules
function for-all-modules-with-meta()
{
    local CALLBACK=$1
    local MODREF=$2
    shift
    shift

    declare -A SCBI_CHECKED
    SCBI_RECTREE=()
    _internal_for-all-modules $CALLBACK true 0 false false $MODREF "@root" $@
}

#  Iterate over all modules, meta-modules and external dependencies
function for-all-modules-with-meta-ext()
{
    local CALLBACK=$1
    local MODREF=$2
    shift
    shift

    declare -A SCBI_CHECKED
    SCBI_RECTREE=()
    _internal_for-all-modules $CALLBACK true 0 true false $MODREF "@root" $@
}

############################## for-final-modules
# list all direct final modules resolving the meta-modules references

function _internal_for-final-modules()
{
    local FORMODULE=$1
    local MODREF=$2

    #  Get module information

    local module_info=( $(get-module-ref $MODREF $FORMODULE) )

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}
    local ref=${module_info[3]}

    [[ $ref = "skip" ]] && return 0

    if [[ $(is-meta-module $MODREF) == yes ]]; then
        load-module $MODREF

        FCT=$(get-hook $module $variant modules)

        for dmodule in $($FCT $SCBI_PREFIX $SCBI_TARGET $variant); do
            _internal_for-final-modules $module $dmodule
        done
    else
        echo $module
    fi
}

#  Parameters is a list of modules
function for-final-modules()
{
    declare -A SCBI_CHECKED
    SCBI_RECTREE=()

    for module in $@; do
        _internal_for-final-modules "@root" $module
    done | sort | uniq
}

############################## get-depends-build-id

function get-build-id-callback()
{
    local FORMODULE=$1
    local MODREF=$2
    local LEVEL=$3
    local IS_BUILD_DEPENDS=$4
    local IS_EXT=$5
    local IS_META=$6

    local module_info=( $(get-module-ref $MODREF $FORMODULE) )
    local module=${module_info[0]}
    local variant=${module_info[1]}

    #  Only compute for dependencies, not for the root module

    if [[ $LEVEL -gt 0 ]] && [[ $IS_META == false ]]; then
        if [[ -f $SCBI_BDIR/$module/build-id-$variant ]]; then

            if [[ -f $SCBI_BDIR/$module/build-id-$variant ]]; then
                cat $SCBI_BDIR/$module/build-id-$variant
            else
                echo $(date)
            fi
        else
            echo $(date)
        fi
    fi
}

function get-depends-build-id()
{
    (
        for-all-modules-with-meta get-build-id-callback $1 | get-md5
    )
}

############################## get-patch-md5

function get-patch-md5()
{
    local PATCH_FILE="$1"

    local patch=""

    if [[ -f "$SCBI_PATCH/$PATCH_FILE" ]]; then
        patch="$SCBI_PATCH/$PATCH_FILE"
    elif [[ -f "$SCBI_DEFS/patches/$PATCH_FILE" ]]; then
        patch="$SCBI_DEFS/patches/$PATCH_FILE"
    fi

    if [[ -f "$patch" ]]; then
        cat $patch | get-md5
    else
        echo not-found
    fi
}

############################## get-build-id

function get-build-id()
{
    local PREFIX=$1
    local TARGET=$2
    local FORMODULE=$3
    local MODREF=$4
    local vid="$5"

    #  Get module information

    local module_info=( $(get-module-ref $MODREF $FORMODULE) )

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}
    local ref=${module_info[3]}

    #  Include the SCBI module, if changed we need to rebuild
    #  We also include the module refrence to ensure virtual modules
    #  withou build, nor install hook for native libraries (see with-variant)
    #  will get differentiated.

    local mid=$variant:$ref

    [[ -f $SCBI_DEFS/$module ]] &&
        mid="$mid,$(cat $SCBI_DEFS/$module | get-md5)"

    #  If patch activated

    local pid="no-patch-found"

    if [[ $DO_PATCH = yes ]]; then
        fn-exists $module-$variant-patches

        if [[ $? = 0 ]]; then
            for patch in $($module-$variant-patches $PREFIX $TARGET \
                                                    $kind $ref);
            do
                pid="$pid,$(get-patch-md5 $patch)"
            done

        else
            fn-exists $module-patches

            if [[ $? = 0 ]]; then
                for patch in $($module-patches $PREFIX $TARGET $variant \
                                               $kind $ref);
                do
                    pid="$pid,$(get-patch-md5 $patch)"
                done
            fi
        fi
    fi

    #  Also compute id from dependencies to ensure we rebuild if one
    #  dependency has changed.

    local did=$(get-depends-build-id $MODREF)

    #  Now compute final id add compile version

    if [[ $SCBI_IS_WINDOWS == yes ]]; then
        echo -n ",$vid,$mid,$pid,$did" | get-md5
    else
        if [[ "$SCBI_HOST" = "$TARGET" ]] \
               || [[ "$(command -v $TARGET-gcc)" = "" ]];
        then
            echo -n $(gcc --version | head -1) \
                 ",$vid,$mid,$pid,$did" | get-md5

        else
            echo -n $($TARGET-gcc --version | head -1) \
                 ",$vid,$mid,$pid,$did" | get-md5
        fi
    fi
}

############################## check-tar-exists
# check if the tarball exists locally, do not try to download it
# exit status 0 = FOUND / 1 = NOT_FOUND

function check-tar-exists()
{
    local MODULE=$1
    local VARIANT=$2
    local VERSION=$3

    local tar=( $(get-tar-data $MODULE $VARIANT $VERSION) )

    if [[ ! $? = 0 ]]; then
        return 1
    fi

    #local proxy=${tar[1]}
    #local tarcp=${tar[2]}
    #local tarurl=${tar[3]}
    local tarsrc=${tar[4]}

    if [[ -f $SCBI_TAR/$tarsrc ]]; then
        return 0
    else
        return 1
    fi
}

############################## set-proxy

function set-proxy()
{
    local NAME=$1

    fn-exists proxy-$NAME

    [[ $? = 0 ]] && proxy-$NAME
}

############################## get-tar-data
# returns in order:
#
#  hook-variant-name-used
#        _
#  proxy  |
#  cp     | as defined in the hook
#  url    |
#  src   _|
#

function get-tar-data()
{
    local MODULE=$1
    local VARIANT=$2
    local VERSION=$3

    local TAR_FUNCTION=$(get-hook $MODULE $VARIANT tar)
    TAR_FUNCTION=${TAR_FUNCTION:=${MODULE}-tar}

    local TAR_VARIANT=default

    #  check first for module specifc VCS variant except for native
    #  variant.

    if [[ $VARIANT != "native" ]]; then
        VAR=SCBI_${MODULE//-/_}_TAR_VARIANT

        if [[ "${!VAR}" != "" ]]; then
            fn-exists $MODULE-${!VAR}-tar
            if [[ $? = 0 ]]; then
                TAR_VARIANT=${!VAR}
                TAR_FUNCTION=$module-${TAR_VARIANT}-tar
            else
                elog build "error: tar specific function for $module not found."
                exit 1
            fi
        elif [[ "${SCBI_TAR_VARIANT}" != "" ]]; then
            fn-exists $module-${SCBI_TAR_VARIANT}-tar
            if [[ $? = 0 ]]; then
                TAR_VARIANT=${SCBI_TAR_VARIANT}
                TAR_FUNCTION=$MODULE-${TAR_VARIANT}-tar
            fi
        fi
    fi

    fn-exists $TAR_FUNCTION

    if [[ $? = 0 ]]; then
        #  First we output the actual variant used
        echo $TAR_VARIANT

        fn-exists scbi-rewrite-tar
        if [[ $? = 0 ]]; then
            scbi-rewrite-tar $($TAR_FUNCTION $VERSION)
        else
            $TAR_FUNCTION $VERSION
        fi
        return 0
    else
        return 1
    fi
}

############################## get-tar

function get-tar()
{
    local MODULE=$1
    local VARIANT=$2
    local VERSION=$3

    local res=0

    local tar=( $(get-tar-data $MODULE $VARIANT $VERSION) )

    local proxy=${tar[1]}
    local tarcp=${tar[2]}
    local tarurl=${tar[3]}
    local tarsrc=${tar[4]}

    #  If tarsrc set to NONE, there is nothing to do for this hook

    if [[ "${tarsrc^^}" == "NONE" ]]; then
        return 0
    fi

    #  The tarball is not present, try downloading it

    if [[ ! -f $SCBI_TAR/$tarsrc ]]     \
           && [[ "$tarcp" != "none" ]]  \
           && [[ "$tarurl" != "none" ]];
    then
        (
            check-tool $tarcp
            if [[ $? != 0 ]]; then
                elog $MODULE Required tool $tarcp missing
                exit 1
            fi

            set-proxy $proxy

            if [[ $tarcp == wget ]]; then
                $tarcp $tarurl/$tarsrc -O $SCBI_TAR/$tarsrc > $log 2>&1
            elif  [[ $tarcp == curl ]]; then
                $tarcp $tarurl/$tarsrc --output $SCBI_TAR/$tarsrc > $log 2>&1
            else
                elog $MODULE error: unknown tar protocol $tarcp
            fi

            [[ ! $? = 0 ]] &&
                rm -f $SCBI_TAR/$tarsrc &&
                elog $MODULE error: cannot get tar: $tarcp
        )
    fi

    [[ ! -f $SCBI_TAR/$tarsrc ]] &&
        elog $MODULE error: tarball $tarsrc not found

    ilog build extract tarball $tarsrc

    [[ ! -d $SCBI_BDIR/$MODULE ]] && mkdir -p $SCBI_BDIR/$MODULE > $log 2>&1

    cd $SCBI_BDIR/$MODULE

    rm -fr tarsrc tar > $log 2>&1
    ( rm -fr tartmp && mkdir -p tartmp ) > $log 2>&1
    cd tartmp

    tar xf $SCBI_TAR/$tarsrc
    topdir=$(ls -d *)

    if [[ -d "$topdir" ]]; then
        mv "$topdir" ../tarsrc
        cd ..
        rmdir tartmp
        ln -s $(realpath --relative-to="$PWD" $SCBI_TAR/$tarsrc) tar
    else
        elog $MODULE error: no top directory found
        res=1
    fi

    return $res
}

############################## display-stat

function display-stat()
{
    echo "SCBI : $SCBI_VERSION"
    echo
    echo stats
    echo -----
    echo "host                  : $(lsb_release -s -d)"
    echo "build dir             : $SCBI_BDIR"
    echo "install prefix        : $SCBI_PREFIX"
    echo "tar dir               : $SCBI_TAR"
    echo "patches dir           : $SCBI_PATCH"
    echo "user's Git repository : $SCBI_GIT_REPO"
    echo "user's SVN repository : $SCBI_SVN_REPO"
    echo -n "e-mail notification   :"

    if [[ $EMAIL_NOTIFICATION == no ]]; then
        echo " no"
    else
        echo " $EMAIL"
    fi

    echo -n "supported platforms   :"
    for L in ${SCBI_LINUX_DISTRIBS[@]}; do
        echo -n " $L"
    done
    echo
}

############################## display-modules

function display-modules()
{
    echo
    echo -n "modules:"

    local linelen=0

    for module in $SCBI_DEFS/[^0-9]*; do
        bn=$(basename $module)
        linelen=$(expr $linelen + ${#bn} + 1)
        if [[ $linelen -gt 70 ]]; then
            echo
            echo -n "        "
            linelen=${#bn}
        fi
        echo -n " $bn"
    done
    echo
}

############################## display-modules

function display-module-version()
{
    local MODREF=$1

    local module_info=( $(get-module-ref $MODREF) )

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}
    local ref=${module_info[3]}

    echo -n $ref
}

############################## display-plans

function display-plans()
{
    echo
    echo -n "plans  :"
    local linelen=0

    if [[ -z "$(ls $SCBI_DEFS/.plan-* 2> /dev/null)" ]]; then
        echo " none"
    else
        for module in $SCBI_DEFS/.plan-*; do
            bn=$(basename $module)
            linelen=$(expr $linelen + ${#bn} + 1)
            if [[ $linelen -gt 70 ]]; then
                echo
                echo -n "        "
                linelen=${#bn}
            fi
            echo -n " ${bn/.plan-/}"
        done
        echo
    fi
}

############################## get-build-type

function get-build-type()
{
    local KIND=$1
    local MODULE=$2
    local DEFAULT=$3

    VAR_GENERIC=SCBI_${KIND}_BUILD_TYPE
    VAR_MODULE=SCBI_${MODULE/-/_}_BUILD_TYPE

    [[ ! -z ${!VAR_GENERIC} ]] && DEFAULT=${!VAR_GENERIC}
    [[ ! -z ${!VAR_MODULE} ]] && DEFAULT=${!VAR_MODULE}

    echo -n $DEFAULT
}

############################## last-modified-directory
# returns the newest (last modified) directory matching pattern

function last-modified-directory()
{
    local PATTERN="$1"

    ls -td $PATTERN 2> /dev/null | head -1
}

############################## check-os-file
# check for a specific file in a set of hint directories, return full pathname
#
# get-os-file <FILENAME> <PATH1> <PATH2> ...

function get-os-file()
{
    local FILENAME=$1
    shift

    while [[ ! -z "$1" ]]; do
        F="$1/$FILENAME"
        RES=$(ls $F 2>&1 > /dev/null)
        if [[ $? == 0 ]]; then
            FILENAME=$F
            break
        fi
        shift
    done

    echo $FILENAME
}

############################## get-os-lib
# check for a specific lib, return full pathname
#
# get-os-lib <FILENAME>

function get-os-lib()
{
    local F=$1
    local BN=${F##*/}

    local R=$(get-os-file "$F" \
                          "/usr/lib*/$SCBI_TARGET" \
                          "/usr/lib*/$SCBI_TARGET/*" \
                          "/usr/lib*" \
                          "/usr/lib*/*" \
                          "/usr/lib*/*/lib*")

    if [[ "$R" != "$F" ]] || [[ "$BN" == "$F" ]]; then
        echo $R
    else
        get-os-file "$BN" \
                    "/usr/lib*/$SCBI_TARGET" \
                    "/usr/lib*/$SCBI_TARGET/*" \
                    "/usr/lib*" \
                    "/usr/lib*/*" \
                    "/usr/lib*/*/lib*"
    fi
}

function get-os-lib-dir()
{
    local R=$(get-os-lib "$1")
    echo ${R%/*}
}

############################## get-os-inc
# check for a specific include, return full pathname
#
# get-os-inc <FILENAME>

function get-os-inc()
{
    local F=$1
    local BN=${F##*/}

    local R=$(get-os-file "$F" \
                          "/usr/include/$SCBI_TARGET" \
                          "/usr/include" \
                          "/usr/include/$SCBI_TARGET/*" \
                          "/usr/include/*")

    if [[ "$R" != "$F" ]] || [[ "$BN" == "$F" ]]; then
        echo $R
    else
        get-os-file "$BN" \
                    "/usr/include/$SCBI_TARGET" \
                    "/usr/include" \
                    "/usr/include/$SCBI_TARGET/*" \
                    "/usr/include*/*"
    fi
}

function get-os-inc-dir()
{
    local R=$(get-os-inc "$1")
    echo ${R%/*}
}

############################## get-os-bin
# check for a specific binary, return full pathname
#
# get-os-bin <FILENAME>

function get-os-bin()
{
    get-os-file "$1" \
                "/usr/bin*" "/usr/lib*/*/bin"
}

function get-os-bin-dir()
{
    local R=$(get-os-bin "$1")
    echo ${R%/*}
}

############################## split all variants
# returns all variants separated with spaces, usage:
#
# for v in $(all-variants $VARIANT); do
#    ...
# done

function all-variants()
{
    local VARIANTS=$1
    if [[ "$VARIANTS" != "default" ]]; then
        echo "${VARIANTS//./ }"
    fi
}

############################## has variant
# returns true if variants exists
#
#  if [[ has-variant "v1.v2" v2 ]]; then
#     ...
#  fi

function has-variant()
{
    local VARIANTS=$1
    local VAR=$2

    for v in $(all-variants $VARIANTS); do
        if [[ $v == $VAR ]]; then
            echo "yes"
            return 0
        fi
    done
    return 1
}

############################## create-standalone-package

function copy-module-src-callback()
{
    local FORMODULE=$1
    local MODREF=$2
    local LEVEL=$3
    local IS_BUILD_DEPENDS=$4
    local IS_EXT=$5
    local IS_META=$6
    local DEST=$7

    local module_info=( $(get-module-ref $MODREF $FORMODULE) )

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}
    local ref=${module_info[3]}

    if [[ $IS_EXT == true ]]; then
        echo -n " $module" >> $DEST/build-deps

    else
        #  copy tarball or vcs sources

        if [[ -d $SCBI_BDIR/$module ]]; then
            ilog standalone "-   $module"

            #  two modules may share the same VCS or tarball
            if [[ -h $SCBI_BDIR/$module/tar ]]; then
                FILE=$(readlink -f $SCBI_BDIR/$module/tar)
                [[ ! -f $DEST/.tar/$(basename $FILE) ]] &&
                    cp -p $FILE $DEST/builds/.tar
            elif [[ -h $SCBI_BDIR/$module/vcs ]]; then
                DIR=$(readlink -f $SCBI_BDIR/$module/vcs)
                [[ ! -d $DEST/.vcs/$(basename $DIR) ]] &&
                    cp -rp $DIR $DEST/builds/.vcs/
            fi
        else
            elog standalone \
                 "-   $module sources not found, cannot create archive"
            exit 1
        fi

        #  copy SCBI module if present

        if [[ -f $SCBI_DEFS/$module ]]; then
            cp -p $SCBI_DEFS/$module $DEST/scripts.d

            #  and then copy patches if any
            (
                function cp-patch()
                {
                    local PATCH_FILE="$1"

                    local patch=""

                    if [[ -f "$SCBI_PATCH/$PATCH_FILE" ]]; then
                        patch="$SCBI_PATCH/$PATCH_FILE"
                    elif [[ -f "$SCBI_DEFS/patches/$PATCH_FILE" ]]; then
                        patch="$SCBI_DEFS/patches/$PATCH_FILE"
                    else
                        elog standalone patch filename \
                             $(basename $PATCH_FILE) not found
                        return 1
                    fi

                    cp $patch $DEST/builds/.patches
                }

                load-module $MODREF

                fn-exists $module-$variant-patches

                if [[ $? = 0 ]]; then
                    for patch in $($module-$variant-patches $PREFIX $TARGET \
                                                            $kind $ref); do
                        cp-patch $patch
                    done

                else
                    fn-exists $module-patches

                    if [[ $? = 0 ]]; then
                        for patch in $($module-patches $PREFIX $TARGET \
                                                       $variant $kind $ref); do
                            cp-patch $patch
                        done
                    fi
                fi
            )
        fi
    fi
}

function create-standalone-package()
{
    local STANDALONE_TMP=${SCBI_TMP:-/tmp}
    local STANDALONE=$STANDALONE_TMP/sa-$(basename $SCBI_BDIR)

    rm -fr $STANDALONE

    ilog standalone Create source archive in $STANDALONE

    (
        mkdir $STANDALONE
        cd $STANDALONE

        #  record the external dependencies

        echo -n "apt install" > build-deps

        #  copy scbi scripts

        mkdir -p bin scripts.d
        mkdir -p builds/.vcs builds/.tar builds/.patches

        #  The main SCBI script, the runtime scripts and the current plan

        cp $SCBI_BINARY bin/
        cp -p $SCBI_DEFS/[0-9]_* scripts.d
        [[ ! -z $SCBI_PLAN ]] && cp -p $SCBI_DEFS/.plan-$SCBI_PLAN scripts.d

        #  copy repositories and tars for all modules with dependencies

        for module in $MODULES; do
            for-all-modules-with-meta-ext \
                copy-module-src-callback $module $STANDALONE
        done

        #  create default local environment

        echo 'SCBI_ROOT=$PWD'                  > .scbi-env-std
        echo 'SCBI_BDIR=$SCBI_ROOT/builds'    >> .scbi-env-std
        echo 'SCBI_PREFIX=$SCBI_BDIR/install' >> .scbi-env-std
        echo 'SCBI_TAR=$SCBI_BDIR/.tar'       >> .scbi-env-std
        echo 'SCBI_PATCH=$SCBI_BDIR/.patches' >> .scbi-env-std
        echo 'SCBI_LOGS=$SCBI_BDIR/.logs'     >> .scbi-env-std
        echo "SCBI_PLAN=$SCBI_PLAN"           >> .scbi-env-std

        #  then create the build script

        echo '#!/bin/bash'                                      > build
        echo -n 'export PYTHON_VERSION=$(python3 --version |'  >> build
        echo " cut -d' '"' -f2 | cut -c1-3)'                   >> build
        echo 'export PATH=$PWD/bin:$PATH'                      >> build
        echo "MODULES=\"$MODULES\""                            >> build
        echo '[ ! -z $1 ] && MODULES="$*"'                     >> build
        echo './bin/scbi --env=std --deps $MODULES'            >> build

        chmod u+x build
    )

    cd $STANDALONE_TMP
    tar cfz $STANDALONE.tgz $(basename $STANDALONE) 2> /dev/null
    rm -fr $STANDALONE

    ilog standalone End create source archive
}

#  Returns the source directory for the given module full reference

function get-source-dir()
{
    local TARGET=$1
    local MODREF=$2

    local module_info=( $(get-module-ref $MODREF) )

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}

    local SCBI_VCS_REPO=

    if [[ $kind == DEV ]]; then
        vcs=( $(get-vcs-data $module $variant) )

        if [[ $? = 0 ]]; then
            VCS_NAME=${vcs[3]}

            case $VCS_NAME in
                git)
                    SCBI_VCS_REPO=$SCBI_GIT_REPO
                    ;;
                svn|subversion)
                    SCBI_VCS_REPO=$SCBI_SVN_REPO
                    ;;
                hg)
                    SCBI_VCS_REPO=$SCBI_HG_REPO
                    ;;
                *)
                    elog $module unsupported VCS $VCS_NAME
                    exit 1
            esac

            DIR=$SCBI_VCS_REPO/$module

        else
            DIR=$SCBI_BDIR/$module
        fi

    else
        DIR=$SCBI_BDIR/$module/$TARGET-$variant/src
    fi

    echo $DIR
}

#  Returns the build directory for the given module full reference

function get-build-dir()
{
    local TARGET=$1
    local MODREF=$2

    local module_info=( $(get-module-ref $MODREF) )

    local module=${module_info[0]}
    local variant=${module_info[1]}

    DIR=$SCBI_BDIR/$module/$TARGET-$variant/build

    echo $DIR
}

############################## inherit-plugin

function inherit-plugin()
{
    local HPLUGIN=$1

    #  Get the caller plug-in name
    local PLUGIN=$(basename $(caller | cut -d' ' -f2))

    #  All hooks
    local SCBI_HOOKS="vcs|tar|env|build-env|depends|build-depends|out-of-tree"
    local SCBI_HOOKS="$SCBI_HOOKS|setup|config|build|install|prefix"

    load-module $HPLUGIN

    #  For each known & existing hook name, create a wrapper with the
    #  name of the caller plug-in.

    for hook in $(declare -F \
                      | cut -d' ' -f3 \
                      | egrep -E "$HPLUGIN-.*($SCBI_HOOKS)");
    do
        H="function ${hook/$HPLUGIN/$PLUGIN}()"
        H="$H { $hook \$1 \$2 \$3 \$4 \$5 \$6 \$7; }"
        eval $H
    done
}

############################## with-variant
# parameters are the OS library for the native support

function with-variant()
{
    local VNAME=$1
    shift

    #  Get the caller plug-in name
    local PLUGIN=$(basename $(caller | cut -d' ' -f2))

    #  Hooks with nop body
    local SCBI_HOOKS="config build install env build-env build-depends"

    local H=""

    for hook in $SCBI_HOOKS; do
        H="function $PLUGIN-$VNAME-$hook()"
        H="$H { true; }"
        eval $H
    done

    #  Hooks with NONE body
    local SCBI_HOOKS="vcs tar"

    for hook in $SCBI_HOOKS; do
        H="function $PLUGIN-$VNAME-$hook()"
        H="$H { echo NONE; echo NONE; echo NONE; echo NONE; }"
        eval $H
    done

    #  Hook prefix
    H="function $PLUGIN-$VNAME-prefix() { echo NONE; }"
    eval $H

    #  Hook depends/env
    H="function $PLUGIN-$VNAME-depends() { "
    local P="echo "
    while [[ ! -z "$1" ]]; do
        if [[ "$1" == "--env" ]]; then
            H="$H true; }"
            eval $H
            H="function $PLUGIN-$VNAME-env() { "
            P=""
        else
            if [[ "${1^^}" == "NONE" ]]; then
               H="$H $P;"
            else
               H="$H $P$1;"
            fi
        fi
        shift
    done
    H="$H }"
    eval $H
}

############################## _internal_call-variant-hooks

function _internal_call-variant-hooks()
{
    local PLUGIN=$1
    local HOOK=$2
    local PREFIX=$3
    local TARGET=$4
    local VARIANT=$5

    local ALLVARS=$(all-variants $VARIANT)
    local VARFOUND=no
    local found=0
    local FCT=""

    #  Always check the common hook, then the variants if defined
    #  or otherwise the default variant. Then if nothing found
    #  we call the main hook (no variant).

    for v in common ${ALLVARS:-default}; do
        found=0
        if [[ $SCBI_HOST != $SCBI_TARGET ]]; then
            FCT="$PLUGIN-$v-cross-$HOOK"
            fn-exists $FCT
            [[ $? = 0 ]] && found=1
        fi

        if [[ $found == 0 ]]; then
            FCT="$PLUGIN-$v-$HOOK"
            fn-exists $FCT
            [[ $? = 0 ]] && found=1
        fi

        if [[ $found == 1 ]]; then
            [[ $v != "common" ]] && [[ $v != "default" ]] && VARFOUND=yes
            $FCT $PREFIX $TARGET $VARIANT
        fi
    done

    if [[ $VARFOUND == no ]]; then
        found=0
        if [[ $SCBI_HOST != $SCBI_TARGET ]]; then
            FCT="$PLUGIN-cross-$HOOK"
            fn-exists $FCT
            [[ $? = 0 ]] && found=1
        fi

        if [[ $found == 0 ]]; then
            FCT="$PLUGIN-$HOOK"
            fn-exists $FCT
            [[ $? = 0 ]] && found=1
        fi

        [[ $found == 1 ]] && $FCT $PREFIX $TARGET $VARIANT
    fi
}

############################## call-variant-hooks

function call-variant-hooks()
{
    local HOOK=$1
    local PREFIX=$2
    local TARGET=$3
    local VARIANT=$4

    local PLUGIN=$(basename $(caller | cut -d' ' -f2))

    _internal_call-variant-hooks $PLUGIN $HOOK $PREFIX $TARGET $VARIANT
}

############################## get-config-options

function get-config-options()
{
    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    local PLUGIN=$(basename $(caller | cut -d' ' -f2))

    _internal_call-variant-hooks $PLUGIN config-options $PREFIX $TARGET $VARIANT
}

############################## module-clean-install

function module-clean-install()
{
    local MPREFIX=$1
    local FORMODULE=$2
    local MODULE=$3
    local VARIANT=$4
    local TARGET=$5
    local OOT=$6

    local SUDO=""
    local _IDIR=""

    fn-exists $MODULE-$VARIANT-prefix

    if [[ $? = 0 ]] && [[ "$SCBI_DEFAULT_PREFIX" = "yes" ]]; then
        _IDIR=$($MODULE-$VARIANT-prefix $MPREFIX $TARGET)
    else
        fn-exists $MODULE-prefix

        if [[ $? = 0 ]] && [[ "$SCBI_DEFAULT_PREFIX" = "yes" ]]; then
            _IDIR=$($MODULE-prefix $MPREFIX $TARGET $VARIANT)
        else
            _IDIR=$SCBI_PREFIX
        fi
    fi

    if [[ $_IDIR != NONE ]]; then
        if [[ ! -w ${_IDIR} ]]; then
            SUDO=sudo
        fi

        #  note that we do not want to fail here
        #  delete files in the final destination installation prefix.
        #  then delete the module install location (double check that the
        #  directory is the right one).

        if [[ -f $MPREFIX/../manifest ]]; then
            cat $MPREFIX/../manifest | while read file; do
                $SUDO rm -f ${_IDIR}/$file
                echo ${file%/*}
            done | sort | uniq | while read dir; do
                rmdir --ignore-fail-on-non-empty --parents \
                      ${_IDIR}/$dir > /dev/null 2>&1 ;
            done &&
                if [[ $(basename $MPREFIX) = "install" ]] \
                       && [[ $(basename $(dirname $MPREFIX)) = "$module" ]];
                then
                    cd $MPREFIX && rm -fr .
                fi
        fi
    fi
}

############################## scbi-store-[get/set]-value scbi-store

function scbi-store-get-key()
{
    local KEY="$1"

    local VALUE=""
    local res=1
    local STORE_FILE=$SCBI_DEFS/.store

    if [[ -f $STORE_FILE ]]; then
        #  check KEY in store

        while read K V; do
            if [[ "$K" = "$KEY" ]]; then
                VALUE=$V
                res=0
                break;
            fi
        done < $STORE_FILE
    fi

    #  check if stdout (1) is a terminal

    if [[ -t 1 ]]; then
        echo $VALUE
    else
        echo -n $VALUE
    fi

    return $res
}

function scbi-store-set-key()
{
    local KEY="$1"
    local VALUE="$2"

    local STORE_FILE=$SCBI_DEFS/.store

    [[ ! -f $STORE_FILE ]] && touch $STORE_FILE

    declare -A STORE

    #  read store content, put it inside STORE

    while read K V; do
        STORE[$K]=$V
    done < $STORE_FILE

    STORE[$KEY]="$VALUE"

    #  clear content

    echo -n > $STORE_FILE

    #  write back content

    for K in "${!STORE[@]}"; do
        echo $K ${STORE[$K]} >> $STORE_FILE
    done

    unset STORE
    return 0
}

function scbi-store()
{
    local KEY="$1"
    local VALUE="$2"

    if [[ -z "$VALUE" ]]; then
        scbi-store-get-key "$KEY"
    else
        scbi-store-set-key "$KEY" "$VALUE"
    fi
}
