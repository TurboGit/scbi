
############################## fn-exists

function fn-exists()
{
    declare -f $1 > /dev/null
}

############################## add-to-var
# add DIR to environment variable VAR, does nothing if DIR does not exists

function add-to-var()
{
    VAR=$1
    DIR=$2

    if [ -d "$DIR" ] && [[ ":${!VAR}:" != *":$DIR:"* ]]; then
       export $VAR="$DIR:${!VAR}"
    fi
}

############################## get-version-number
# return a 2 digits version number for $1

VERSION_OK=9999
VERSION_ERROR=-1

function get-version-number()
{
    echo -n "$1" | sed -e 's/[^0-9-]*\(\-\?[0-9]*\(\.[0-9]*\)\?\).*/\1/g'
}

############################## display-version

function display-version()
{
    version=$1

    if [ "$version" = "$VERSION_OK" ]; then
        echo latest
    elif [ "$version" = "$VERSION_ERROR" ]; then
        echo not found
    else
        echo $version
    fi
}

############################## gprbuild-project
# for testing if a project compile and link

function gprbuild-project()
{
    PRJ=$1

    (
        if [ $HOST == $TARGET ]; then
            gprbuild -p -q $PRJ -cargs -gnatwA
        else
            gprbuild -p -q --target=$TARGET $PRJ -cargs -gnatwA
        fi
    )  > /dev/null 2>&1
}

############################## check-tool

function check-tool()
{
    if [ -z "$(which $1)" ]; then
	echo Required tool $1 missing, please update the PATH
	return 1
    fi
    return 0
}

############################## check-tools

function check-tools()
{
    local res=0

    while [ "$1" != "" ]; do
	check-tool $1
	res=$(expr $res + $?)
	shift
    done
    return $res
}

############################## display-file

function display-file()
{
    local file=$1

    echo File : $file
    cat $file
}

############################## get-build-id

function get-build-id()
{
    local PREFIX=$1
    local TARGET=$2
    local MODULE=$3
    local vid="$4"

    local pid=no-patch-found

    # if patch activated and patches dir exists

    if [ $PATCH = yes -a -d $PATCHES ]; then
        if [ ! -z $(ls $PATCHES/$MODULE-*.patch 2> /dev/null) ]; then
            local pid=$(cat $PATCHES/$MODULE-*.patch 2>&1 |
                            md5sum | cut -d' ' -f1)
        fi
    fi

    if [ "$HOST" = "$TARGET" -o "$(which $TARGET-gcc)" = "" ]; then
        echo -n $(gcc --version | head -1) ",$vid,$pid" \
            | md5sum | cut -d' ' -f1

    else
        echo -n $($TARGET-gcc --version | head -1) ",$vid,$pid" \
            | md5sum | cut -d' ' -f1
    fi
}

############################## get-tar

function get-tar()
{
    local module=$1
    local version=$2
    local res=0

    tar=( $($module-tar $version) )

    tarcp=${tar[0]}
    tarurl=${tar[1]}
    tarsrc=${tar[2]}

    #  The tarball is not present, try downloading it

    if [ ! -f $TARBALL/$tarsrc && "$tarcp" != "none" && "$tarurl" != "none" ]; then
        $tarcp $tarurl/$tarsrc $TARBALL/ > $log 2>&1

        [[ ! $? = 0 ]] &&
            echo "error: cannot get tar: $tarcp" &&
            return 1
    fi

    [ ! -f $TARBALL/$tarsrc ] &&
        echo "error: tarball $tarsrc not found" &&
        return 1

    ilog build extract tarball $tarsrc

    [ ! -d $BDIR/$module ] && mkdir -p $BDIR/$module > $log 2>&1

    cd $BDIR/$module

    rm -fr tarsrc > $log 2>&1
    ( rm -fr tartmp && mkdir -p tartmp ) > $log 2>&1
    cd tartmp

    tar xf $TARBALL/$tarsrc
    topdir=$(ls -d *)

    if [ -d "$topdir" ]; then
        mv "$topdir" ../tarsrc
        cd ..
        rmdir tartmp
    else
        echo Error, no top directory found.
        res=1
    fi

    return $res
}

############################## display-stat

function display-stat()
{
    echo
    echo stats
    echo -----
    echo "build dir             : $BDIR"
    echo "install prefix        : $PREFIX"
    echo "tar dir               : $TARBALL"
    echo "patches dir           : $PATCHES"
    echo "user's Git repository : $GIT_REPO"
    echo "user's SVN repository : $SVN_REPO"
    echo -n "e-mail notification   :"

    if [ $EMAIL_NOTIFICATION == no ]; then
        echo " no"
    else
        echo " $EMAIL"
    fi
}

############################## display-modules

function display-modules()
{
    echo
    echo -n "modules:"

    local linelen=0

    for module in $DEFS/[^0-9]*; do
        bn=$(basename $module)
        linelen=$(expr $linelen + ${#bn} + 1)
        if [ $linelen -gt 70 ]; then
            echo
            echo -n "        "
            linelen=${#bn}
        fi
	echo -n " $bn"
    done
    echo
}

############################## display-plans

function display-plans()
{
    echo
    echo -n "plans  :"
    local linelen=0

    if [ -z "$(ls $DEFS/.plan-* 2> /dev/null)" ]; then
        echo " none"
    else
        for module in $DEFS/.plan-*; do
            bn=$(basename $module)
            linelen=$(expr $linelen + ${#bn} + 1)
            if [ $linelen -gt 70 ]; then
                echo
                echo -n "        "
                linelen=${#bn}
            fi
	    echo -n " ${bn/.plan-/}"
        done
        echo
    fi
}
