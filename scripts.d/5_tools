
declare -gA SCBI_MODULE_ALIAS

SCBI_STATUS_VERSION_OK=0
SCBI_STATUS_VERSION_NOK=1
SCBI_STATUS_PKG_NOT_INSTALLED=2
SCBI_STATUS_PKG_NOT_FOUND=3

SCBI_ERROR_HOOK_NOT_FOUND=4
SCBI_ERROR_PLUGIN_NOT_FOUND=5

declare -g SCBI_RECTREE=()

############################## display-stacktrace
#
function display-stacktrace()
{
    local frame=0 LINE SUB FILE

    while read LINE SUB FILE < <(caller "$frame"); do
        printf '  %s @ %s:%s\n' "${SUB}" "${FILE}" "${LINE}" > $(tty)
        ((frame++))
    done
}

############################## comment-out-block
#
# Comment out a block (using COMMENT_TOKEN) starting with PATTERN
# ($2) and stop when an empty line is found. Spaces after the PATTERN
# are ignored until the end-of-line.
# This function also unlink hardlink to ensure the change is made only
# on the specified file.

function comment-out-block()
{
    local FILE="$1"
    local PATTERN="$2"
    local COMMENT_TOKEN="$3"

    local INBLOCK=no
    local ISEXEC=no

    #  Restore executable bit if present
    [[ -x $FILE ]] && ISEXEC=yes

    #  Make sur we unlink hardlink
    cp --remove-destination $FILE $FILE.tmp
    rm $FILE

    while IFS= read -r line; do
        if [[ ! $line =~ [^[:space:]] ]]; then
            INBLOCK=no
        elif [[ $line =~ $PATTERN ]]; then
            INBLOCK=yes
        fi

        if [[ $INBLOCK == yes ]]; then
            echo "$COMMENT_TOKEN $line"
        else
            echo "$line"
        fi
    done < $FILE.tmp > $FILE

    rm -f $FILE.tmp

    [[ $ISEXEC == yes ]] && chmod a+x $FILE
}

############################## _internal_get-hook
# return the hook name for the given step. This can be the
# hook for a variant and/or cross build.

function _internal_get-hook()
{
    local -n RESULT=$1
    local MODULE=$2
    local VARIANT=$3
    local STEP=$4

    local _HOOK=""

    if [[ $SCBI_HOST != $SCBI_TARGET ]]; then
        fn-exists $MODULE-$VARIANT-cross-$STEP
        if [[ $? = 0 ]]; then
            _HOOK=$MODULE-$VARIANT-cross-$STEP
        else
            fn-exists $MODULE-cross-$STEP
            [[ $? = 0 ]] && _HOOK=$MODULE-cross-$STEP
        fi
    fi

    if [[ -z $_HOOK ]]; then
        fn-exists $MODULE-$VARIANT-$STEP
        if [[ $? = 0 ]]; then
            _HOOK=$MODULE-$VARIANT-$STEP
        fi
    fi

    RESULT=$_HOOK
}

function get-hook()
{
    local -n RESULT=$1
    local MODULE=$2
    local VARIANT=$3
    local STEP=$4

    local ALLVARS=()
    all-variants-v ALLVARS $VARIANT

    local HOOK=""

    for v in ${ALLVARS[*]:-default}; do
        _internal_get-hook HOOK $MODULE $v $STEP
        [[ -n $HOOK ]] && break
    done

    if [[ -z $HOOK ]]; then
        fn-exists $MODULE-$STEP
        [[ $? = 0 ]] && HOOK=$MODULE-$STEP
    fi

    RESULT=$HOOK
}

############################## get-version-number
# return a 3 digits version number for $1

VERSION_OK=99999999
VERSION_ERROR=-1

function get-version-number()
{
    local -n RESULT=$1
    local VALUE=$2

    local NUM=$(echo -n "${VALUE//_/.}" |
                    sed -e 's/[^0-9-]*\(\-\?[0-9]*\(\.[0-9]*\)\?\(\.[0-9]*\)\?\).*/\1/g')

    local NLETTERS=$(( ${#VALUE} - ${#NUM} ))

    #  The label contains more than five non digit characters, very unlikely to be
    #  a version number. Could be a branch name with some numbers for example.

    if [[ $NLETTERS -gt 5 ]] || [[ ${NUM: -1} == '.' ]]; then
        RESULT=0
    else
        RESULT=$NUM
    fi
}

############################## gprbuild-project
# for testing if a project compile and link

function gprbuild-project()
{
    local PRJ=$1

    (
        if [[ $SCBI_HOST == $TARGET ]]; then
            gprbuild -p -q $PRJ -cargs -gnatwA
        else
            gprbuild -p -q --target=$TARGET $PRJ -cargs -gnatwA
        fi
    )  > /dev/null 2>&1
}

############################## display-file

function display-file()
{
    local FILE=$1

    echo File : $FILE
    cat $FILE
}

############################## get-md5

function get-md5()
{
    local V=( $(md5sum) )
    echo ${V[0]}
}

############################## is-meta-module
#
# return yes/0 if MODREF is a meta-module

function is-meta-module()
{
    local MODREF=$1

    local module_info=()
    get-module-ref module_info $MODREF
    local module=${module_info[0]}
    local variant=${module_info[1]}

    local key="${module}.${variant}"

    if [[ -z "${SCBI_LOADED[$module]}" ]]; then
        load-module $MODREF
    fi

    if [[ "${SCBI_LOADED[$key]}" == "meta" ]]; then
        echo "yes"
        return 0
    else
        echo "no"
        return 1
    fi
}

############################## is-meta-aggregate-module
#
# return yes/0 if MODREF is a meta-module

function is-meta-aggregate-module()
{
    local -n RESULT=$1
    local MODREF=$2

    local module_info=()
    get-module-ref module_info $MODREF
    local module=${module_info[0]}
    local variant=${module_info[1]}

    local key="${module}.${variant}.agg"

    if [[ -z "${SCBI_LOADED[$module]}" ]]; then
        load-module $MODREF
    fi

    if [[ -z "${SCBI_LOADED[$key]}" ]]; then
        RESTUL="no"
        return 1
    else
        RESULT=${SCBI_LOADED[$key]}
        return 0
    fi
}

############################## check-dependency-tree
#
# check whether a module is in the dependency tree

function check-dependency-tree()
{
    local MODULE=$1
    local res=1

    for m in ${SCBI_RECTREE[*]}; do
        if [[ $m = $MODULE ]]; then
            res=0
        fi
    done

    return $res
}

############################## push-dependency-tree
#
# push module in dependency tree

function push-dependency-tree()
{
    SCBI_RECTREE+=($1)
}

############################## pop-dependency-tree
#
# pop last module pushed from dependency tree

function pop-dependency-tree()
{
    unset SCBI_RECTREE[-1]
}

############################## get-all-depends
#
# return each module in $module-$hook and also in each active variants
# $module-<variant>-$hook.

function get-all-depends()
{
    local MODULE="$1"
    local VARIANT="$2"
    local HOOK="$3"

    for M in $(plugin-call-variant-hooks \
                   $MODULE $HOOK "$SCBI_PREFIX" "$SCBI_TARGET" $VARIANT);
    do
        #  Module is found
        if [[ -f $SCBI_PLUGINS/$M ]]; then
            echo $M
        else
            #  Check if we have an alias for it
            local MA=${SCBI_MODULE_ALIAS[$M]}
            if [[ -n $MA ]] && [[ -f $SCBI_PLUGINS/$MA ]]; then
                echo $MA
            else
                echo $M
            fi
        fi
    done

    true
}

############################## for-all-modules
#
#   CALLBACK         : called for each module
#   WITH_META        : true / false
#   WITH_DEPS        : both        : depends and build-depends
#                      deps        : only depends
#                      build-deps  : only build-depends
#                      build-deps-1 : first level build-deps then deps
#   WITH_EXT         : true / false
#   DEPTH            : max recursive depth, 0 top-level module
#   LEVEL            : current recursive level
#   DEPENDS_KINDS    : dependency kind : default | build | tests
#   MODREF           : the module to iterate on
#   FORMODULE        : the module in which the ref was found
#                      (@root for top-level)
function _internal_for-all-modules()
{
    local CALLBACK=$1
    local WITH_META=$2
    local WITH_DEPS=$3
    local WITH_EXT=$4
    local DEPTH=$5
    local LEVEL=$6
    local DEPENDS_KIND=$7
    local MODREF=$8
    local FORMODULE=$9
    local IS_AGGREGATED=${10}
    shift 10

    #  IS_AGG        : status of current module MODREF
    #  IS_AGGREGATED : status of depends in recursive call
    local IS_AGG=false
    if [[ $IS_AGGREGATED == recursive ]]; then
        local IS_AGG=true
    elif [[ $IS_AGGREGATED == direct ]]; then
        local IS_AGG=true
        IS_AGGREGATED=false
    fi

    #  Wether to handle the depends or build-depends or both

    local R_DEPS=yes
    local R_BDEPS=yes
    local R_TDEPS=no

    if [[ $WITH_DEPS == deps ]]; then
        local R_BDEPS=no
    elif [[ $WITH_DEPS == tests-deps ]]; then
        local R_DEPS=no
        local R_BDEPS=no
        local R_TDEPS=yes
    elif [[ $WITH_DEPS == build-deps ]]; then
        local R_DEPS=no
    elif [[ $WITH_DEPS == build-deps-1 ]]; then
        local R_DEPS=no
    fi

    #  Check if recursive dependencies is needed

    [[ $LEVEL -gt $DEPTH ]] && return 0

    #  Get module information

    local module_info=()
    get-module-ref module_info $MODREF $FORMODULE

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}
    local ref=${module_info[3]}

    [[ $ref = "skip" ]] && return 0

    #  Next level
    local NEXTL=$((LEVEL + 1))

    #  Check dependency graph to ensure there is no circularities

    check-dependency-tree $module

    if [[ $? = 0 ]]; then
        elog $module recursive dependencies detected

        local N=${#SCBI_RECTREE[*]}
        ((N-=2))

        for (( i=0 ; i<=$N ; i++ )); do
            local j=$((i + 1))
            elog $module " ⦁ ${SCBI_RECTREE[$i]}" '%B%t→%c' ${SCBI_RECTREE[$j]}
        done

        elog $module " ⦁ ${SCBI_RECTREE[-1]}" '%B%t→%c' $module
        exit 1
    fi

    #  Then load module

    local IS_META=false

    local MKEY="$MODREF:$DEPENDS_KIND"

    if [[ -z "${SCBI_CHECKED[$MKEY]}" ]]; then
        SCBI_CHECKED[$MKEY]=yes

        load-module $MODREF

        if [[ $? = 0 ]]; then
            push-dependency-tree $module
            local res=0

            local MODS=$(plugin-call-variant-hooks \
                             $module modules $SCBI_PREFIX $SCBI_TARGET $variant)

            if [[ -n $MODS ]]; then
                IS_META=true
            fi

            if [[ $WITH_META == true ]] && [[ $IS_META == true ]]; then
                #  check for meta-modules if present. note that a meta-module
                #  does not account for a new level as it contains no module
                #  and is used in place of a set of module. so here we do not
                #  pass NEXTL but LEVEL if not in strict direct dependencies.

                local NXL=$LEVEL
                [[ $DO_DEPS == yes-direct ]] && NXL=$NEXTL

                #  check if aggregate module

                local AMODE=""
                is-meta-aggregate-module AMODE $MODREF

                for dmodule in $MODS; do
                    _internal_for-all-modules $CALLBACK $WITH_META $WITH_DEPS \
                                              $WITH_EXT $DEPTH $NXL \
                                              $DEPENDS_KIND $dmodule $module \
                                              $AMODE $@
                done || res=1

                if [[ $res == 0 ]]; then
                    $CALLBACK $FORMODULE $MODREF $LEVEL \
                              $DEPENDS_KIND false $IS_META $IS_AGG $@
                fi

                pop-dependency-tree
                return $res
            fi

            #  Setup depends recursively if any

            [[ $R_DEPS == yes ]] &&
                {
                    for dmodule in \
                        $(get-all-depends $module $variant depends);
                    do
                        _internal_for-all-modules \
                            $CALLBACK $WITH_META $WITH_DEPS \
                            $WITH_EXT $DEPTH $NEXTL \
                            default $dmodule $module $IS_AGGREGATED $@
                    done || res=1
                }

            #  Setup build-depends recursively if any

            [[ $res == 0 ]] && [[ $R_BDEPS == yes ]] &&
                {
                    local NEXTD=$WITH_DEPS
                    [[ $NEXTD == build-deps-1 ]] && NEXTD=deps
                    for dmodule in \
                        $(get-all-depends $module $variant build-depends);
                    do
                        _internal_for-all-modules $CALLBACK $WITH_META $NEXTD \
                                                  $WITH_EXT $DEPTH $NEXTL \
                                                  build $dmodule $module \
                                                  $IS_AGGREGATED $@
                    done || res=1
                }

            #  Setup tests-depends if any

            [[ $res == 0 ]] && [[ $R_TDEPS == yes ]] &&
                {
                    for dmodule in \
                        $(get-all-depends $module $variant tests-depends);
                    do
                        _internal_for-all-modules \
                            $CALLBACK $WITH_META $WITH_DEPS \
                            $WITH_EXT $DEPTH $NEXTL \
                            tests $dmodule $module $IS_AGGREGATED $@
                    done || res=1
                }

            if [[ $res == 0 ]]; then
                $CALLBACK $FORMODULE $MODREF $LEVEL \
                          $DEPENDS_KIND false $IS_META $IS_AGG $@
            fi

            pop-dependency-tree

            return $res
        else
            #  module does not exists, this is an external dependency

            if [[ $WITH_EXT == true ]]; then
                local PKGNAME=$(get-pkg-name $MODREF)
                [[ -n $PKGNAME ]] &&
                    $CALLBACK $FORMODULE $PKGNAME $LEVEL \
                              $DEPENDS_KIND true $IS_META $IS_AGG $@
            else
                check-pkg $module:$ref
                if [[ $? == 1 ]] && [[ $DO_WARNING_EXTERNAL == no ]]; then
                    exit 1
                fi
            fi

            return 0
        fi
    fi
}

#  Iterate over all modules
function for-all-modules()
{
    local CALLBACK=$1
    local MODREF=$2
    shift 2

    local DEPTH=99999
    [[ $DO_DEPS == yes-direct ]] && DEPTH=2

    declare -A SCBI_CHECKED
    _internal_for-all-modules $CALLBACK false both false $DEPTH 0 default \
                              $MODREF "@root" false $@
}

#  Iterate over all modules and external dependencies
function for-all-modules-ext()
{
    local CALLBACK=$1
    local MODREF=$2
    shift 2

    local DEPTH=99999
    [[ $DO_DEPS == yes-direct ]] && DEPTH=2

    declare -A SCBI_CHECKED
    _internal_for-all-modules $CALLBACK false both true $DEPTH 0 default \
                              $MODREF "@root" false $@
}

#  Iterate over all modules and meta-modules
function for-all-modules-with-meta()
{
    local CALLBACK=$1
    local MODREF=$2
    shift 2

    local DEPTH=99999
    [[ $DO_DEPS == yes-direct ]] && DEPTH=2

    declare -A SCBI_CHECKED
    _internal_for-all-modules $CALLBACK true both false $DEPTH 0 default \
                              $MODREF "@root" false $@
}

#  Iterate over all depends modules and meta-modules
function for-all-modules-depends-with-meta()
{
    local CALLBACK=$1
    local MODREF=$2
    shift 2

    local DEPTH=99999
    [[ $DO_DEPS == yes-direct ]] && DEPTH=2

    declare -A SCBI_CHECKED
    _internal_for-all-modules $CALLBACK true deps false $DEPTH 0 default \
                              $MODREF "@root" false $@
}

#  Iterate over all modules, meta-modules and external dependencies
function for-all-modules-with-meta-ext()
{
    local CALLBACK=$1
    local MODREF=$2
    shift 2

    local DEPTH=99999
    [[ $DO_DEPS == yes-direct ]] && DEPTH=2

    declare -A SCBI_CHECKED
    _internal_for-all-modules $CALLBACK true both true $DEPTH 0 default \
                              $MODREF "@root" false $@
}

#  Iterate over all direct modules, meta-modules and external dependencies
function for-all-direct-modules-with-meta-ext()
{
    local CALLBACK=$1
    local MODREF=$2
    shift 2

    declare -A SCBI_CHECKED
    _internal_for-all-modules $CALLBACK true both true 1 0 default \
                              $MODREF "@root" false $@
}

#  Iterate over all modules, meta-modules and external
#  dependencies. This is to construct the environment, so first we
#  check direct build-depends and then recursively the dependencies.
function for-all-modules-build-depends-with-meta()
{
    local CALLBACK=$1
    local MODREF=$2
    shift 2

    local DEPTH=99999
    declare -A SCBI_CHECKED
    _internal_for-all-modules $CALLBACK true build-deps-1 false $DEPTH 0 build \
                              $MODREF "@root" false $@
}

function for-all-modules-tests-depends-with-meta()
{
    local CALLBACK=$1
    local MODREF=$2
    shift 2

    local DEPTH=999999
    declare -A SCBI_CHECKED

    _internal_for-all-modules $CALLBACK true tests-deps false $DEPTH 0 tests \
                              $MODREF "@root" false $@
}

############################## for-final-modules
# list all direct final modules resolving the meta-modules references

function _internal_for-final-modules()
{
    local FORMODULE=$1
    local MODREF=$2

    #  Get module information

    local module_info=()
    get-module-ref module_info $MODREF $FORMODULE

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}
    local ref=${module_info[3]}

    [[ $ref = "skip" ]] && return 0

    if [[ $(is-meta-module $MODREF) == yes ]]; then
        load-module $MODREF

        local MODS=$(plugin-call-variant-hooks \
                         $module modules $SCBI_PREFIX $SCBI_TARGET $variant)

        for dmodule in $MODS; do
            _internal_for-final-modules $module $dmodule
        done
    else
        echo $module
    fi
}

#  Parameters is a list of modules
function for-final-modules()
{
    declare -A SCBI_CHECKED

    for module in $@; do
        _internal_for-final-modules "@root" $module
    done | sort | uniq
}

############################## get-depends-build-id

function get-build-id-callback()
{
    local FORMODULE=$1
    local MODREF=$2
    local LEVEL=$3
    local DEPENDS_KIND=$4
    local IS_EXT=$5
    local IS_META=$6
    local IS_AGGREGATED=$7

    local module_info=()
    get-module-ref module_info $MODREF $FORMODULE
    local module=${module_info[0]}
    local variant=${module_info[1]}

    #  Only compute for dependencies, not for the root module

    if [[ $LEVEL -gt 0 ]] && [[ $IS_META == false ]]; then
        if [[ $IS_EXT == true ]]; then
            echo ${SCBI_PKGS[$module]}
        elif [[ -f $SCBI_BDIR/$module/build-id-$variant ]]; then

            if [[ -f $SCBI_BDIR/$module/build-id-$variant ]]; then
                cat $SCBI_BDIR/$module/build-id-$variant
            else
                printf "%(%c)T" -1
            fi
        else
            printf "%(%c)T" -1
        fi
    fi
}

function get-depends-build-id()
{
    local MODREF=$1

    (
        for-all-direct-modules-with-meta-ext \
            get-build-id-callback $MODREF | get-md5
    )
}

############################## get-patch-md5

function get-patch-md5()
{
    local PATCH_FILE="$1"

    local patch=""

    if [[ -f "$SCBI_PATCH/$PATCH_FILE" ]]; then
        patch="$SCBI_PATCH/$PATCH_FILE"
    elif [[ -f "$SCBI_PLUGINS/patches/$PATCH_FILE" ]]; then
        patch="$SCBI_PLUGINS/patches/$PATCH_FILE"
    fi

    if [[ -f "$patch" ]]; then
        cat $patch | get-md5
    else
        echo not-found
    fi
}

############################## get-build-id

function get-build-id()
{
    local PREFIX=$1
    local TARGET=$2
    local FORMODULE=$3
    local MODREF=$4
    local vid="$5"

    #  Get module information

    local module_info=()
    get-module-ref module_info $MODREF $FORMODULE

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}
    local ref=${module_info[3]}

    #  Include the SCBI module, if changed we need to rebuild
    #  We also include the module refrence to ensure virtual modules
    #  withou build, nor install hook for native libraries (see with-variant)
    #  will get differentiated.

    local mid=$variant:$ref

    [[ -f $SCBI_PLUGINS/$module ]] &&
        mid+=",$(cat $SCBI_PLUGINS/$module | get-md5)"

    #  And add possible SCBI_<module>_BUILD_TYPE that is in the environment

    local var_module=SCBI_${module//-/_}_BUILD_TYPE

    [[ -n ${!var_module} ]] &&
        mid+=",${!var_module}"

    #  And possibly the SCBI_*_BUILD_TYPE global settings for
    #  some known builders.

    for builder in CMAKE CONFIGURE MAKE GPR; do
        local BVAR=SCBI_${builder}_BUILD_TYPE
        [[ -n ${!BVAR} ]] && mid+=",${!BVAR}"
    done

    #  If patch activated

    local pid="no-patch-found"

    if [[ $DO_PATCH = yes ]]; then
        for patch in \
            $(plugin-call-variant-hooks $module patches \
                                        $PREFIX $TARGET $variant \
                                        $kind $ref);
        do
            pid+=",$(get-patch-md5 $patch)"
        done
    fi

    #  Also compute id from dependencies to ensure we rebuild if one
    #  dependency has changed.

    local did=$(get-depends-build-id $MODREF)

    #  Also check if some environment values are used on this project

    local eid=""

    for extenv in \
        $(plugin-call-variant-hooks $module external-env \
                                    $PREFIX $TARGET $variant);
    do
        eid+=",$extenv"
    done

    #  Now compute final id

    echo -n "$vid,$mid,$pid,$did$eid" | get-md5
}

############################## check-archive-exists
# check if the archive exists locally, do not try to download it
# exit status 0 = FOUND / 1 = NOT_FOUND

function check-archive-exists()
{
    local MODULE=$1
    local VARIANT=$2
    local VERSION=$3

    local tar=( $(get-archive-data $MODULE $VARIANT $VERSION) )

    if [[ $? != 0 ]]; then
        return 1
    fi

    #local proxy=${tar[1]}
    #local taropts=${tar[2]}
    #local tarcp=${tar[3]}
    #local tarurl=${tar[4]}
    local tarsrc=${tar[5]}

    if [[ -f $SCBI_ARCHIVES/$tarsrc ]]; then
        return 0
    else
        return 1
    fi
}

############################## set-proxy

function set-proxy()
{
    local NAME=$1

    fn-exists proxy-$NAME

    [[ $? = 0 ]] && proxy-$NAME
}

############################## get-archive-data
# returns in order:
#
#  hook-variant-name-used
#        _
#  proxy  |
#  cp     | as defined in the hook
#  url    |
#  src   _|
#

function get-archive-data()
{
    local MODULE=$1
    local VARIANT=$2
    local VERSION=$3

    local ARCHIVE_FUNCTION=""
    get-hook ARCHIVE_FUNCTION $MODULE $VARIANT archive
    ARCHIVE_FUNCTION=${ARCHIVE_FUNCTION:=${MODULE}-archive}

    #  Get selected variant out of the hook function name

    local ARCHIVE_VARIANT=${ARCHIVE_FUNCTION#$MODULE}
    ARCHIVE_VARIANT=${ARCHIVE_VARIANT%-archive}
    ARCHIVE_VARIANT=${ARCHIVE_VARIANT#-}
    ARCHIVE_VARIANT=${ARCHIVE_VARIANT:-default} # no variant use default

    #  check first for module specifc tar variant except for native
    #  variant.

    if [[ $VARIANT != "native" ]]; then
        VAR=SCBI_${MODULE//-/_}_ARCHIVE_VARIANT

        if [[ -n ${!VAR} ]]; then
            fn-exists $MODULE-${!VAR}-archive
            if [[ $? = 0 ]]; then
                ARCHIVE_VARIANT=${!VAR}
                ARCHIVE_FUNCTION=$module-${ARCHIVE_VARIANT}-archive
            else
                elog $module "tar specific function not found"
                exit 1
            fi
        elif [[ -n ${SCBI_ARCHIVE_VARIANT} ]]; then
            fn-exists $module-${SCBI_ARCHIVE_VARIANT}-archive
            if [[ $? = 0 ]]; then
                ARCHIVE_VARIANT=${SCBI_ARCHIVE_VARIANT}
                ARCHIVE_FUNCTION=$MODULE-${ARCHIVE_VARIANT}-archive
            fi
        fi
    fi

    fn-exists $ARCHIVE_FUNCTION

    if [[ $? = 0 ]]; then
        #  First we output the actual variant used
        echo $ARCHIVE_VARIANT

        fn-exists scbi-rewrite-archive
        if [[ $? = 0 ]]; then
            scbi-rewrite-archive $($ARCHIVE_FUNCTION $VERSION)
        else
            $ARCHIVE_FUNCTION $VERSION
        fi
        return 0
    else
        return 1
    fi
}

############################## get-archive

function get-archive()
{
    local MODULE=$1
    local VARIANT=$2
    local VERSION=$3

    local res=0

    local tar=( $(get-archive-data $MODULE $VARIANT $VERSION) )

    local proxy=${tar[1]}
    local taropts=${tar[2]}
    local tarcp=${tar[3]}
    local tarurl=${tar[4]}
    local tarsrc=${tar[5]}

    #  If tarsrc set to NONE, there is nothing to do for this hook

    if [[ "${tarsrc^^}" == "NONE" ]]; then
        return 0
    fi

    local options=""

    if [[ "${taropts^^}" != "NONE" ]]; then
        options="${taropts/,/ }"
    fi

    #  The archive is not present, try downloading it

    if [[ "${tarcp^^}" != "NONE" ]]  \
           && [[ "${tarurl^^}" != "NONE" ]];
    then
        check-tool $tarcp
        if [[ $? != 0 ]]; then
            elog $MODULE Required tool $tarcp missing
            return 1
        fi

        (
            set-proxy $proxy

            local do_download=0

            #  Get SHA-1 if present

            if [[ $tarcp == wget ]]; then
                $tarcp $options $tarurl/$tarsrc.sha1 \
                       -O /tmp/$tarsrc.sha1 > $log 2>&1
            elif [[ $tarcp == curl ]]; then
                $tarcp $options $tarurl/$tarsrc.sha1 \
                       --output /tmp/$tarsrc.sha1 > $log 2>&1
            elif [[ $tarcp == cp ]] || [[ $tarcp == scp ]]; then
                $tarcp $options $tarurl/$tarsrc.sha1 \
                       /tmp/$tarsrc.sha1 > $log 2>&1
            else
                false
            fi

            #  Check SHA1 if found, check up-to-date

            if [[ $? == 0 ]]; then
                diff -q $SCBI_ARCHIVES/$tarsrc.sha1 \
                     /tmp/$tarsrc.sha1 > /dev/null 2>&1

                if [[ $? -ne 0 ]]; then
                    do_download=1
                fi
            fi

            if [[ $do_download == 1 ]] || [[ ! -f $SCBI_ARCHIVES/$tarsrc ]]; then
                do_download=1

                if [[ $tarcp == wget ]]; then
                    $tarcp $options $tarurl/$tarsrc \
                           -O $SCBI_ARCHIVES/$tarsrc > $log 2>&1
                elif [[ $tarcp == curl ]]; then
                    $tarcp $options $tarurl/$tarsrc \
                           --output $SCBI_ARCHIVES/$tarsrc > $log 2>&1
                elif [[ $tarcp == cp ]] || [[ $tarcp == scp ]]; then
                    $tarcp $options $tarurl/$tarsrc \
                           $SCBI_ARCHIVES/$tarsrc > $log 2>&1
                else
                    elog $MODULE unknown tar protocol $tarcp
                fi

                if [[ $? -ne 0 ]]; then
                    rm -f $SCBI_ARCHIVES/$tarsrc $SCBI_ARCHIVES/$tarsrc.sha1
                    elog $MODULE cannot get archive: $tarcp
                    elog $MODULE from $tarurl/$tarsrc
                else
                    [[ -f /tmp/$tarsrc.sha1 ]] &&
                        cp /tmp/$tarsrc.sha1 $SCBI_ARCHIVES/$tarsrc.sha1
                fi
            fi

            rm -f /tmp/$tarsrc.sha1

            return $do_download
        )
    else
        false
    fi

    local downloaded=$?

    [[ ! -f $SCBI_ARCHIVES/$tarsrc ]] &&
        {
            elog $MODULE archive $tarsrc not found
            return 1
        }

    [[ $downloaded == 0 ]] && [[ -d $SCBI_BDIR/$MODULE/archive-src ]] && return 0

    ilog build extract archive $tarsrc

    [[ ! -d $SCBI_BDIR/$MODULE ]] &&
        mkdir -p $SCBI_BDIR/$MODULE > $log 2>&1

    cd $SCBI_BDIR/$MODULE

    {
        rm -fr tarsrc tar tar-sha1 archive-src archive archive-sha1
        rm -fr archivetmp
        mkdir -p archivetmp
    } > $log 2>&1

    cd archivetmp

    if [[ "$tarsrc" =~ "tar.zst" ]]; then
        check-tools unzstd
        [[ $? == 1 ]] &&
            {
                elog $MODULE missing zst tool to decompress this archive
                return 1
            }
    fi

    if [[ "$tarsrc" =~ ".zip" ]]; then
        check-tools unzip
        [[ $? == 1 ]] &&
            {
                elog $MODULE missing unzip tool to decompress this archive
                return 1
            }
        unzip $SCBI_ARCHIVES/$tarsrc
    else
        tar xf $SCBI_ARCHIVES/$tarsrc
    fi

    [[ $? != 0 ]] &&
        {
            elog $MODULE archive $tarsrc is corrupted
            return 1
        }

    topdir=$(ls -d *)

    if [[ -d "$topdir" ]]; then
        mv $topdir ../archive-src
        cd ..
        rm -fr archivetmp
        ln -s $(realpath --relative-to="$PWD" $SCBI_ARCHIVES/$tarsrc) archive
        [[ -f $SCBI_ARCHIVES/$tarsrc.sha1 ]] &&
            ln -s $(realpath --relative-to="$PWD" $SCBI_ARCHIVES/$tarsrc.sha1) \
               archive-sha1
    else
        elog $MODULE no top directory found
        res=1
    fi

    return $res
}

############################## display-stat

function display-stat()
{
    echo "SCBI : $SCBI_VERSION"
    echo
    echo stats
    echo -----
    if [[ $SCBI_IS_WINDOWS == yes ]]; then
        printf "%-21s : %s\n" "host" "windows"
    else
        printf "%-21s : %s\n" "host" "$(lsb_release -s -d)"
    fi
    printf "%-21s   %s\n" ""                      "$SCBI_HOST"
    if [[ $SCBI_HOST != $SCBI_TARGET ]]; then
        printf "%-21s : %s\n" "target"            "$SCBI_TARGET"
    fi
    printf "%-21s : %s\n" "build dir"             "$SCBI_BDIR"
    printf "%-21s : %s\n" "install prefix"        "$SCBI_PREFIX"
    printf "%-21s : %s\n" "archive dir"           "$SCBI_ARCHIVES"
    printf "%-21s : %s\n" "patches dir"           "$SCBI_PATCH"
    printf "%-21s : %s\n" "user's Git repository" "$SCBI_GIT_REPO"
    printf "%-21s : %s\n" "user's SVN repository" "$SCBI_SVN_REPO"
    printf "%-21s : %s\n" "plan"                  "${SCBI_PLAN:-no}"
    printf "%-21s : "     "e-mail notification"

    if [[ $SCBI_EMAIL_NOTIFICATION == no ]]; then
        echo "no"
    else
        echo "$SCBI_EMAIL"
    fi

    printf "%-21s : %s\n"   "supported platforms" "${SCBI_OS_NAMES[*]}"
    printf "%-21s :" "discriminants"

    local FMT="%s%s\n"
    echo "${!SCBI_OS_DISCRIMINANTS[*]}" | fold -s -w 50 - |
        while read line; do
            printf $FMT " " "$line"
            FMT="%-24s%s\n"
        done
    echo
}

############################## display-modules

function display-modules()
{
    echo -n "modules:"

    local linelen=0

    for module in $SCBI_PLUGINS/[^0-9_]*; do
        bn=$(basename $module)
        linelen=$((linelen + ${#bn} + 1))
        if [[ $linelen -gt 70 ]]; then
            echo
            echo -n "        "
            linelen=${#bn}
        fi
        echo -n " $bn"
    done
    echo
    echo
}

############################## display-plans

function display-plans()
{
    echo -n "plans  :"
    local linelen=0

    if [[ -z "$(ls $SCBI_PLUGINS/.plan-* 2> /dev/null)" ]]; then
        echo " none"
    else
        for module in $SCBI_PLUGINS/.plan-*; do
            bn=$(basename $module)
            linelen=$((linelen + ${#bn} + 1))
            if [[ $linelen -gt 70 ]]; then
                echo
                echo -n "        "
                linelen=${#bn}
            fi
            echo -n " ${bn/.plan-/}"
        done
        echo
    fi
}

############################## synchronize directories using hard links

function sync-dir()
{
    local FROM=$1
    local TO=$2
    shift 2

    local RELTO=$(realpath --relative-to=$TO $FROM)

    rsync -a --exclude=".git" --exclude=".gitignore" --exclude=".svn" \
          --link-dest=$RELTO $* $FROM $TO
}

############################## create-standalone-package

function copy-module-src-callback()
{
    local FORMODULE=$1
    local MODREF=$2
    local LEVEL=$3
    local DEPENDS_KIND=$4
    local IS_EXT=$5
    local IS_META=$6
    local IS_AGGREGATED=$7
    local DEST=$8

    local module_info=()
    get-module-ref module_info $MODREF $FORMODULE

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}
    local ref=${module_info[3]}

    if [[ $IS_EXT == true ]]; then
        echo -n " $module" >> $DEST/build-deps

    else
        #  Copy archive or vcs sources

        if [[ -d $SCBI_BDIR/$module ]]; then
            ilog standalone "-   $module"

            #  two modules may share the same VCS or archive
            if [[ -h $SCBI_BDIR/$module/archive ]]; then
                FILE=$(readlink -f $SCBI_BDIR/$module/archive)
                [[ ! -f $DEST/.archives/$(basename $FILE) ]] &&
                    cp -p $FILE $DEST/builds/.archives
            elif [[ -h $SCBI_BDIR/$module/vcs ]]; then
                DIR=$(readlink -f $SCBI_BDIR/$module/vcs)
                [[ ! -d $DEST/.vcs/$(basename $DIR) ]] &&
                    cp -rp $DIR $DEST/builds/.vcs/
            fi
        else
            elog $module "sources not found, cannot create archive"
            exit 1
        fi

        #  copy SCBI module if present

        if [[ -f $SCBI_PLUGINS/$module ]]; then
            cp -p $SCBI_PLUGINS/$module $DEST/scripts.d

            if [[ $DO_PATCH = yes ]]; then
                #  and then copy patches if any
                (
                    function cp-patch()
                    {
                        local PATCH_FILE="$1"

                        local patch=""

                        if [[ -f "$SCBI_PATCH/$PATCH_FILE" ]]; then
                            patch="$SCBI_PATCH/$PATCH_FILE"
                        elif [[ -f "$SCBI_PLUGINS/patches/$PATCH_FILE" ]]; then
                            patch="$SCBI_PLUGINS/patches/$PATCH_FILE"
                        else
                            elog $module patch filename $(basename $PATCH_FILE) not found
                            return 1
                        fi

                        cp $patch $DEST/builds/.patches
                    }

                    load-module $MODREF


                    for patch in \
                        $(plugin-call-variant-hooks $module patches \
                                                    $PREFIX $TARGET $variant \
                                                    $kind $ref);
                    do
                        cp-patch $patch
                    done
                )
            fi
        fi
    fi
}

function create-standalone-package()
{
    local STANDALONE_TMP=${SCBI_TMP:-/tmp}
    local STANDALONE=$STANDALONE_TMP/sa-$(basename $SCBI_BDIR)

    rm -fr $STANDALONE

    ilog standalone Create source archive in $STANDALONE

    (
        mkdir $STANDALONE
        cd $STANDALONE

        #  record the external dependencies

        echo -n "apt install" > build-deps

        #  copy scbi scripts

        mkdir -p bin scripts.d
        mkdir -p builds/.vcs builds/.tar builds/.patches

        #  The main SCBI script, the runtime scripts and the current plan

        cp $SCBI_BINARY bin/
        cp -p $SCBI_PLUGINS/[0-9]_* scripts.d
        [[ -n $SCBI_PLAN ]] && cp -p $SCBI_PLUGINS/.plan-$SCBI_PLAN scripts.d

        #  copy repositories and tars for all modules with dependencies

        for module in ${SCBI_MODULES[*]}; do
            for-all-modules-with-meta-ext \
                copy-module-src-callback $module $STANDALONE
        done

        #  create default local environment

        {
            echo 'SCBI_ROOT=$PWD'
            echo 'SCBI_BDIR=$SCBI_ROOT/builds'
            echo 'SCBI_PREFIX=$SCBI_BDIR/install'
            echo 'SCBI_ARCHIVES=$SCBI_BDIR/.archives'
            echo 'SCBI_PATCH=$SCBI_BDIR/.patches'
            echo 'SCBI_LOGS=$SCBI_BDIR/.logs'
            echo "SCBI_PLAN=$SCBI_PLAN"
        } > .scbi-env-std

        #  then create the build script

        {
            echo '#!/bin/bash'
            echo -n 'export PYTHON_VERSION=$(python3 --version |'
            echo " cut -d' '"' -f2 | cut -c1-3)'
            echo 'export PATH=$PWD/bin:$PATH'
            echo "SCBI_MODULES=\"${SCBI_MODULES[*]}\""
            echo '[[ -n $1 ]] && SCBI_MODULES="$*"'
            echo './bin/scbi --env=std --deps $SCBI_MODULES'
        } > build

        chmod u+x build
    )

    cd $STANDALONE_TMP
    tar cfz $STANDALONE.tgz $(basename $STANDALONE) 2> /dev/null
    rm -fr $STANDALONE

    ilog standalone End create source archive
}

#  Returns the source directory for the given module full reference

function get-source-dir()
{
    local TARGET=$1
    local MODREF=$2

    local module_info=()
    get-module-ref module_info $MODREF

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}

    local SCBI_VCS_REPO=

    if [[ $kind == DEV ]]; then
        vcs=( $(get-vcs-data $module $variant) )

        if [[ $? = 0 ]]; then
            VCS_NAME=${vcs[3]}

            case $VCS_NAME in
                git)
                    SCBI_VCS_REPO=$SCBI_GIT_REPO
                    ;;
                svn|subversion)
                    SCBI_VCS_REPO=$SCBI_SVN_REPO
                    ;;
                hg)
                    SCBI_VCS_REPO=$SCBI_HG_REPO
                    ;;
                *)
                    elog $module unsupported VCS $VCS_NAME
                    exit 1
            esac

            DIR=$SCBI_VCS_REPO/$module

        else
            DIR=$SCBI_BDIR/$module
        fi

    else
        DIR=$SCBI_BDIR/$module/$TARGET-$variant/src
    fi

    echo $DIR
}

#  Returns the build directory for the given module full reference

function get-build-dir()
{
    local TARGET=$1
    local MODREF=$2

    local module_info=()
    get-module-ref module_info $MODREF

    local module=${module_info[0]}
    local variant=${module_info[1]}

    DIR=$SCBI_BDIR/$module/$TARGET-$variant/build

    echo $DIR
}

############################## module-clean-install

function module-clean-install()
{
    local MPREFIX=$1
    local FORMODULE=$2
    local MODULE=$3
    local VARIANT=$4
    local TARGET=$5
    local OOT=$6

    local SUDO=""
    local _IDIR=""

    fn-exists $MODULE-$VARIANT-prefix

    if [[ $? = 0 ]] && [[ "$SCBI_DEFAULT_PREFIX" = "yes" ]]; then
        _IDIR=$($MODULE-$VARIANT-prefix $MPREFIX $TARGET)
    else
        fn-exists $MODULE-prefix

        if [[ $? = 0 ]] && [[ "$SCBI_DEFAULT_PREFIX" = "yes" ]]; then
            _IDIR=$($MODULE-prefix $MPREFIX $TARGET $VARIANT)
        else
            _IDIR=$SCBI_PREFIX
        fi
    fi

    if [[ $_IDIR != NONE ]]; then
        if [[ ! -w ${_IDIR} ]]; then
            SUDO=sudo
        fi

        #  note that we do not want to fail here
        #  delete files in the final destination installation prefix.
        #  then delete the module install location (double check that the
        #  directory is the right one).

        if [[ -f $MPREFIX/../manifest ]]; then
            cat $MPREFIX/../manifest | while read file; do
                $SUDO rm -f ${_IDIR}/$file
                echo ${file%/*}
            done | sort | uniq | while read dir; do
                rmdir --ignore-fail-on-non-empty --parents \
                      ${_IDIR}/$dir > /dev/null 2>&1 ;
            done &&
                if [[ $(basename $MPREFIX) = "install" ]] \
                       && [[ $(basename $(dirname $MPREFIX)) = "$module" ]];
                then
                    cd $MPREFIX && rm -fr .
                fi
        fi
    fi
}
