#  setup for SCBI shell & command spawn

############################## run-shell

function run-shell()
{
    local TARGET=$1
    local MODULES=( $2 )
    local DOCD=$3

    if [[ -z $SHELL ]]; then
        echo \$SHELL is not defined, cannot spawn a shell
        exit 1
    fi

    curcd=$(pwd)

    local MODREF=${MODULES[-1]}

    for M in ${MODULES[*]}; do
        handle-env "@root" $M
        if [[ $M != $MODREF ]] || [[ $DOCD == no ]]; then
            handle-module-env "@root" $M env
        fi
    done

    local module_info=( $(get-module-ref $MODREF) )
    local module=${module_info[0]}
    local kind=${module_info[2]}

    export SCBI_SHELL=$module

    [[ $kind == DEV ]] && DOCD=yes-dev

    #  If docd set (no cwd sub-option specified), we are moving into
    #  the module's build directory. In this mode we not only want the
    #  environment of all dependencies to be set but we also want the
    #  build environment of the root module to be set.

    if [[ $DOCD == no ]]; then
        cd $curcd
    else
        handle-build-depends-env "@root" $MODREF

        [[  $DOCD == yes-tests ]] &&
            handle-tests-depends-env "@root" $MODREF

        if [[ $DOCD == yes-dev ]]; then
            cd $(get-vcs-dir $module:dev)
        else
            cd $(get-build-dir $TARGET $MODREF)
        fi
    fi

    #  Exports all functions into the bash sub-shell
    eval "$(declare -F | sed -e 's/-f /-fx /')"
    $SHELL
}

############################## run-command

function run-command()
{
    local TARGET=$1
    local MODULES=( $2 )
    local CMD="$3"

    if [[ -z $SHELL ]]; then
        echo \$SHELL is not defined, cannot spawn a shell
        exit 1
    fi

    local MODREF=${MODULES[-1]}

    for M in ${MODULES[*]}; do
        handle-env "@root" $M
        handle-module-env "@root" $M env
    done

    local module_info=( $(get-module-ref $MODREF) )
    local module=${module_info[0]}

    export SCBI_SHELL=$module

    #  Exports all functions into the bash sub-shell
    eval "$(declare -F | sed -e 's/-f /-fx /')"

    $SHELL -c "$CMD"
}
