############################## module-patch

function module-apply-patch()
{
    local MODULE=$1
    local PATCH_FILE="$2"

    local patch=""

    if [[ -z "$PATCH_FILE" ]]; then
        return 0
    elif [[ -f "$SCBI_PATCH/$PATCH_FILE" ]]; then
        patch="$SCBI_PATCH/$PATCH_FILE"
    elif [[ -f "$SCBI_DEFS/patches/$PATCH_FILE" ]]; then
        patch="$SCBI_DEFS/patches/$PATCH_FILE"
    else
        elog $MODULE patch filename $(basename $PATCH_FILE) not found
        return 1
    fi

    ilog $MODULE apply-patch filename $(basename $patch)

    check-tools-abort patch

    patch -p1 < $patch > /dev/null
    return $?
}

############################## module-patch

function module-patch()
{
    local PREFIX=$1
    local TARGET=$2
    local MODREF=$3

    local module_info=( $(get-module-ref $MODREF) )

    local module=${module_info[0]}
    local variant=${module_info[1]}
    local kind=${module_info[2]}
    local ref=${module_info[3]}

    local res=0

    fn-exists $module-$variant-patches

    if [[ $? = 0 ]]; then
        for patch in $($module-$variant-patches $PREFIX $TARGET \
                                                $kind $ref);
        do
            module-apply-patch $module "$patch"
            [[ ! $? = 0 ]] && res=1
        done

    else
        fn-exists $module-patches

        if [[ $? = 0 ]]; then
            for patch in $($module-patches $PREFIX $TARGET $variant \
                                           $kind $ref);
            do
                module-apply-patch $module "$patch"
                [[ ! $? = 0 ]] && res=1
            done
        fi
    fi

    return $res
}

############################## module-setup

function module-setup()
{
    local PREFIX=$1
    local FORMODULE=$2
    local MODULE=$3
    local VARIANT=$4
    local TARGET=$5
    local OOT=$6

    #  if module-src soft link exists use it to copy the module sources into
    #  the pointed location. This is used when multiple modules are used
    #  together to create the set of source for the build. In this case we do
    #  not want to delete sources in rsync.
    #
    #  Note: we do exclude gcc-interface directory here to avoid overwriting
    #        the gcc-interface sources from GNAT.

    if [[ -h module-src ]]; then
        SRCDIR=module-src
        LINKDEST=../../../src
        OPT=
    else
        SRCDIR=$TARGET-$VARIANT/src
        LINKDEST=../../src
        OPT=--delete
    fi

    local res=0

    if [[ -h src ]] || [[ -d src ]]; then
        rsync -a $OPT --exclude=".git" --exclude=".gitignore" --exclude=".svn" \
            --exclude "gcc-interface" \
            --link-dest=$LINKDEST src/. $SRCDIR/

        #  If some patches are present, apply them now
        if [[ $DO_PATCH == yes ]]; then
            (
                cd $SRCDIR

                module-patch $PREFIX $TARGET $MODULE
            )
            res=$?
        fi
    fi

    rm -fr build
    ln -s $TARGET-$VARIANT build

    if [[ "$OOT" = "yes" ]]; then
        #  build must be a dir, delete link if it exists
        #  build must be a dir
        if [[ $SCBI_HOST == "x86_64-mingw64" ]]; then
            #  There is no symlinks on MSYS
            [[ -d $TARGET-$VARIANT/build ]] && rm -fr $TARGET-$VARIANT/build
        else
            [[ -h $TARGET-$VARIANT/build ]] && rm -f $TARGET-$VARIANT/build
        fi
        mkdir -p $TARGET-$VARIANT/build
    else
        #  build must be a link, delete dir if it exists
        rm -fr $TARGET-$VARIANT/build
        ln -s src $TARGET-$VARIANT/build
    fi

    return $res
}

############################## module-purge

function module-purge()
{
    local PREFIX=$1
    local FORMODULE=$2
    local MODULE=$3
    local VARIANT=$4
    local TARGET=$5
    local OOT=$6

    #  note that we keep the manifest to be sure that we can clean-up
    #  the final install destination.

    if [[ -d $PREFIX/$TARGET-$VARIANT ]]; then
        rm -fr $PREFIX/$TARGET-$VARIANT/build
        rm -fr $PREFIX/$TARGET-$VARIANT/build-id
        rm -fr $PREFIX/$TARGET-$VARIANT/install
        rm -fr $PREFIX/$TARGET-$VARIANT/src
        rm -fr $PREFIX/build-id-$VARIANT
        rm -f $PREFIX/build
    fi
}

############################## module-pre-install

function module-pre-install()
{
    local MPREFIX=$1
    local FORMODULE=$2
    local MODULE=$3
    local VARIANT=$4
    local TARGET=$5
    local OOT=$6

    #  Clean previous installation
    module-clean-install $MPREFIX $FORMODULE $MODULE $VARIANT $TARGET $OOT
}

############################## module-install

function module-install()
{
    local PREFIX=$1
    local FORMODULE=$2
    local MODULE=$3
    local VARIANT=$4
    local TARGET=$5
    local OOT=$6

    if [[ ! -f build-id-$VARIANT ]]; then
        #  No build-id, this means that the sources have been installed by
        #  the <module>-setup most probably. In this case just compute the
        #  build-id to be the md5sum of all sources available in src directory.
        #  If this directory does not exists, let's build a md5sum of the
        #  current date/time as a build-id. In this case the build will always
        #  been triggered.

        if [[ -d src ]]; then
            vid=$(cat src/* | md5sum | cut -d' ' -f1)
            get-build-id $PREFIX $TARGET \
                         $FORMODULE $MODULE $vid > build-id-$VARIANT
        else
            echo -n $(date) | md5sum | cut -d' ' -f1 > build-id-$VARIANT
        fi
    fi

    #  get all installed files, do that only if the installation has
    #  been done. module just bringing sources for another module won't
    #  install anything.

    if [[ -d ./build/install ]]; then
        (
            cd ./build/install
            find . -type f > ../manifest
        )
    fi

    cp build-id-$VARIANT $TARGET-$VARIANT/build-id
}
