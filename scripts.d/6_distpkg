#  Support for distrib packages.
#
#  For adding a new distrib:
#     - add support for new distrib in get-distrib
#     - add 3 letters acronym for new distrib in SCBI_LINUX_DISTRIBS
#     - implement init-<distrib>-pkg
#     - implement check-<distrib>-pkg
#     - implement get-<distrib>-lib-for-dev (optional)

#  All currently installed packages
declare -A SCBI_PKGS

#  OS dependent alias map
declare -g -A SCBI_ALIAS

SCBI_LINUX_DISTRIBS=( deb ubt rhl )

check-tools-abort lsb_release

############################## get-distrib
# returns the name of the current distrib

function get-distrib()
{
    local DES=$(lsb_release -d)
    if [[ $DES =~ "Debian" ]]; then
        echo deb
    elif [[ $DES =~ "Ubuntu" ]]; then
        echo ubt
    elif [[ $DES =~ "Red Hat" ]]; then
        echo rhl
    else
        echo none
    fi
}

SCBI_LINUX_DISTRIB=$(get-distrib)

############################## init-alias
# read package alias file

function init-alias()
{
    local FILE="$1"

    if [[ -f $FILE ]]; then
        while read pkg a; do
            SCBI_ALIAS["$pkg"]=$a
        done < <( cat "$FILE" )
    fi
}

############################## init-distrib-alias
# check all possible distrib alias files

function init-distrib-alias()
{
    local DIST=$1
    local VER=$(lsb_release -r -s)

    if [[ $VER =~ ([0-9]+)(\.([0-9]+))? ]]; then
        local MAJOR=${BASH_REMATCH[1]}
        local MINOR=${BASH_REMATCH[3]}
    fi

    for NAME in $DIST $DIST-$MAJOR ${MINOR:+$DIST-$MAJOR-$MINOR}; do
        init-alias $SCBI_DEFS/.pkgs-$NAME
        init-alias $SCBI_BDIR/.scbi-pkgs-$NAME
        init-alias $PWD/.scbi-pkgs-$NAME
    done
}

############################## init-deb-pkg
# cache all installed packages

function init-none-pkg()
{
    echo "Unsupported Linux distribution, external lib support disabled"
    echo ""
}

function init-deb-pkg()
{
    check-tools-abort dpkg-query

    while read ii pkg version dummy; do
        SCBI_PKGS["$pkg"]=$version
    done < <( dpkg-query -l | tail -n+6 | sed 's/:amd64//g' )

    init-distrib-alias deb
}

function init-ubt-pkg()
{
    check-tools-abort dpkg-query

    while read ii pkg version dummy; do
        SCBI_PKGS["$pkg"]=$version
    done < <( dpkg-query -l | tail -n+6 | sed 's/:amd64//g' )

    init-distrib-alias ubt
}

function init-rhl-pkg()
{
    check-tools-abort dnf rpm

    # format : cmake-0:3.11.4-7.el8.x86_64
    #          <name>-<indice>:<version>-<level>.<rel>.<arch>
    while read N; do
        pkg=${N%%:*};
        pkg=${pkg%-*};
        version=${N#*:};
        version=${version%-*};
        SCBI_PKGS["$pkg"]="$version"
    done < <( dnf repoquery --installed 2> /dev/null | grep -v "^Not root" )

    init-distrib-alias rhl
}

############################## check-deb-pkg
# check-deb-pkg should return:
#   3 - package not found
#   2 - package found but not installed
#   1 - package installed but wrong version
#   0 - package installed with proper version

function check-none-pkg()
{
    return 0
}

function check-deb-pkg()
{
    local pck=$1
    local version=$(get-version-number $2)

    local inst_ver=${SCBI_PKGS[$pck]}

    if [[ -z $inst_ver ]]; then
        #  Package is not installed, check if it exists

        apt-cache show $pck &> /dev/null

        if [[ $? = 0 ]]; then
            return 2
        else
            return 3
        fi

    else
        #  Is the installed version ok?

        if [[ $inst_ver > $version ]]; then
            return 0
        else
            return 1
        fi
    fi
}

function check-ubt-pkg()
{
    check-deb-pkg "$1" "$2"
}

function check-rhl-pkg()
{
    local pck=$1
    local version=$(get-version-number $2)

    local inst_ver=${SCBI_PKGS[$pck]}

    if [[ -z $inst_ver ]]; then
        #  Package is not installed, check if it exists

        rpm -qi $pck &> /dev/null

        if [[ $? = 0 ]]; then
            return 2
        else
            return 3
        fi

    else
        #  Is the installed version ok?

        if [[ $inst_ver > $version ]]; then
            return 0
        else
            return 1
        fi
    fi
}

############################## get-deb-lib-for-dev

function get-deb-lib-for-dev()
{
    local pkg=$1

    check-tools-abort apt-cache

    if [[ ${pkg: -4} != "-dev" ]]; then
        echo "error: $pkg is not a dev package (should end with -dev)"
        return 1
    fi

    # package name without trailing -dev
    local base=${pkg:0:-4}

    local res=$(LC_ALL=C LANG=C apt-cache depends $1 | grep 'Depends:' \
                    | grep "$base" | cut -d':' -f2)

    for D in $res; do
        if [[ "${D: -4}" = "-dev" ]]; then
            get-deb-lib-for-dev "$D"
        else
            echo $D
        fi
    done
}

############################## get-pkg-name
# returns the package name or possibly a list of packages if
# the parameter is an alias for a distribution.

function get-pkg-name()
{
    local pkg=$1

    # if package start with os@- it is an alias, lookup
    # in the corresponding table:
    #
    #    SCBI_ALIAS[pkg]

    if [[ "${pkg:0:4}" == "os@-" ]]; then
        REF="SCBI_ALIAS["$pkg"]"
        echo ${!REF}
    else
        echo $pkg
    fi
}

############################## get-pkg-version
# returns the package version for the current distribution

function get-pkg-version()
{
    local pkg=$1

    local pname=$(get-pkg-name "$pkg")
    echo ${SCBI_PKGS[$pname]}
}

############################## get-lib-for-dev
# returns the library for the given dev package

function get-lib-for-dev()
{
    local pkg=$(get-pkg-name "$1")

    get-${SCBI_LINUX_DISTRIB}-lib-for-dev $pkg
}

############################## check-pkg
#
# check a distrib package, returned code:
#
#  0 - found & installed
#  1 - found & not installed or wrong version
#  2 - not found

function check-pkg()
{
    local name_ver=( ${1/:/ } )
    local pkg=${name_ver[0]}
    local version=${name_ver[1]}

    for distname in $(get-pkg-name "$pkg"); do
        check-${SCBI_LINUX_DISTRIB}-pkg $distname $version

        local res=$?

        if [[ $res = 3 ]]; then
            echo "error: $distname not found"
            return 2
        elif [[ $res = 2 ]]; then
            if [[ $version == NONE ]]; then
                echo "error: $distname should be installed"
            else
                echo "error: $distname:$version should be installed"
            fi
            return 1
        elif [[ $res = 1 ]]; then
            echo "error: $distname:$version should be installed"
            return 1
        else
            return 0
        fi
    done
}

init-${SCBI_LINUX_DISTRIB}-pkg
