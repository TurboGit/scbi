#  Support for distrib packages.
#
#  For adding a new distrib:
#     - add support for new distrib in get-distrib
#     - add 3 letters acronym for new distrib in SCBI_OS_NAMES
#     - implement init-<distrib>-pkg
#     - implement check-<distrib>-pkg
#     - implement get-<distrib>-lib-for-dev (optional)

declare -gA SCBI_OS_DISCRIMINANTS

#  All currently installed packages
declare -gA SCBI_PKGS

#  OS dependent alias map
declare -gA SCBI_ALIAS

SCBI_OS_NAMES=( deb ubt cos rhl fed win mingw )

if [[ $SCBI_IS_WINDOWS == no ]]; then
    check-tools-abort lsb_release
fi

############################## get-distrib
# returns the name of the current distrib

function get-distrib()
{
    if [[ $SCBI_IS_WINDOWS == yes ]]; then
        if [[ -n $MINGW_PREFIX ]]; then
            echo mingw
        else
            echo win
        fi
    else
        local DES=$(lsb_release -d)

        if [[ $DES =~ "Debian" ]]; then
            echo deb
        elif [[ $DES =~ "Ubuntu" ]]; then
            echo ubt
        elif [[ $DES =~ "Red Hat" ]]; then
            echo rhl
        elif [[ $DES =~ "CentOS" ]]; then
            echo cos
        elif [[ $DES =~ "Fedora" ]]; then
            echo fed
        else
            echo none
        fi
    fi
}

############################## setup-discriminants
# set the discriminants for the running machine

function setup-discriminants()
{
    export SCBI_OS_VERSION=unknown
    export SCBI_OS_MAJOR_VERSION=unknown
    export SCBI_OS_ID=unknown

    if [[ $SCBI_IS_WINDOWS == yes ]]; then
        SCBI_OS_DISCRIMINANTS+=([windows]="yes")
        ##  ??? how to get architecture & version
    else
        local VER=$(lsb_release -r)
        local OID=$(lsb_release -i)
        local CNM=$(lsb_release -c)
        local DES=$(lsb_release -d)

        local VER=${VER#*:+([[:blank:]])}
        local OID=${OID#*:+([[:blank:]])}
        local CNM=${CNM#*:+([[:blank:]])}
        local DES=${DES#*:+([[:blank:]])}

        local VER=${VER#n/a}

        local DES=${DES//\// }
        local DES=${DES//\(/ }
        local DES=${DES//\)/ }

        SCBI_OS_VERSION=$VER
        SCBI_OS_CODENAME=$CNM
        SCBI_OS_MAJOR_VERSION=${SCBI_OS_VERSION%%.*}
        SCBI_OS_ID=$OID

        for D in ${DES,,}; do
            SCBI_OS_DISCRIMINANTS+=([$D]="yes")
        done

        local HND=$(hostname --domain)
        SCBI_OS_DISCRIMINANTS+=([$(uname -m)]="yes")
        SCBI_OS_DISCRIMINANTS+=([$(hostname --short)]="yes")
        [[ -n $HND ]] &&
            SCBI_OS_DISCRIMINANTS+=([$HND]="yes")
        SCBI_OS_DISCRIMINANTS+=([${SCBI_OS_ID,,}]="yes")
        [[ -n $SCBI_OS_VERSION ]] &&
            SCBI_OS_DISCRIMINANTS+=([$SCBI_OS_VERSION]="yes")
        [[ -n $SCBI_OS_MAJOR_VERSION ]] &&
            SCBI_OS_DISCRIMINANTS+=([$SCBI_OS_MAJOR_VERSION]="yes")
        SCBI_OS_DISCRIMINANTS+=([${SCBI_OS_CODENAME,,}]="yes")
    fi

    if [[ $SCBI_HOST != $SCBI_TARGET ]]; then
        SCBI_OS_DISCRIMINANTS+=(["cross"]="yes")
        local TGT=(${SCBI_TARGET//-/ })

        for D in ${TGT[@]/#/target-}; do
            SCBI_OS_DISCRIMINANTS+=([${D,,}]="yes")
        done
    fi
}

#  Can be forced in test driver

if [[ -z $SCBI_OS_NAME ]]; then
    export SCBI_OS_NAME=$(get-distrib)

    SCBI_OS_DISCRIMINANTS=([$SCBI_OS_NAME]="yes")
    setup-discriminants
else
    SCBI_OS_DISCRIMINANTS=([${SCBI_OS_MAJOR_VERSION:-default}]="yes"
                           [${SCBI_OS_VERSION:-default}]="yes"
                           [${SCBI_OS_NAME:-default}]="yes")
fi

############################## init-alias
# read package alias file

function init-alias()
{
    local FILE="$1"

    while read pkg a; do
        SCBI_ALIAS["$pkg"]=$a
    done < <( for F in "${FILE}" "${FILE}"-*; do [[ -f $F ]] && cat $F; done )
}

############################## init-distrib-alias
# check all possible distrib alias files

function init-distrib-alias()
{
    local DIST=$1

    local MAJOB=""
    local MINOR=""

    [[ $SCBI_IS_WINDOWS == no ]] &&
        {
            local VER=$(lsb_release -r -s)

            if [[ $VER =~ ([0-9]+)(\.([0-9]+))? ]]; then
                local MAJOR=${BASH_REMATCH[1]}
                local MINOR=${BASH_REMATCH[3]}
            fi
        }

    for NAME in $DIST ${MAJOR:+${DIST}~${MAJOR}} ${MINOR:+${DIST}~${MAJOR}.$MINOR}; do
        init-alias $SCBI_PLUGINS/.pkgs-$NAME
        init-alias $SCBI_BDIR/.scbi-pkgs-$NAME
        init-alias $PWD/.scbi-pkgs-$NAME
    done
}

############################## clean-version-string
# returns the version string number only

function clean-version-string()
{
    local -n RESULT="$1"
    local VERSION=$2

    RESULT=${VERSION#*:}
    RESULT=${RESULT%-*}
    RESULT=${RESULT%+repack*}
    RESULT=${RESULT%+dfsg*}
    RESULT=${RESULT%\~*}
}

############################## init-deb-pkg
# cache all installed packages

function init-none-pkg()
{
    echo "Unsupported Linux distribution, external lib support disabled"
    echo ""
}

function init-deb-pkg()
{
    check-tools-abort dpkg-query

    while read ii pkg version dummy; do
        pkg=${pkg%:*}
        clean-version-string version $version
        SCBI_PKGS["$pkg"]=$version
    done < <( dpkg-query -l | tail -n+6 )

    init-distrib-alias deb
}

function init-ubt-pkg()
{
    check-tools-abort dpkg-query

    while read ii pkg version dummy; do
        pkg=${pkg%:*}
        clean-version-string version $version
        SCBI_PKGS["$pkg"]=$version
    done < <( dpkg-query -l | tail -n+6 )

    init-distrib-alias ubt
}

function init-cos-pkg()
{
    check-tools-abort dnf rpm

    #  format : cmake-0:3.11.4-7.el8.x86_64
    #           <name>-<indice>:<version>-<level>.<rel>.<arch>
    while read N; do
        pkg=${N%%:*}
        pkg=${pkg%-*}
        clean-version-string version ${N#*:}
        SCBI_PKGS["$pkg"]="$version"
    done < <( dnf repoquery --installed 2> /dev/null |
                  grep -v "^Not root" |
                  sed '/^ *$/d' )

    init-distrib-alias cos
}

function init-fed-pkg()
{
    check-tools-abort dnf rpm

    #  format : cmake-0:3.11.4-7.el8.x86_64
    #           <name>-<indice>:<version>-<level>.<rel>.<arch>
    while read N; do
        pkg=${N%%:*}
        pkg=${pkg%-*}
        clean-version-string version ${N#*:}
        SCBI_PKGS["$pkg"]="$version"
    done < <( dnf repoquery --installed 2> /dev/null |
                  grep -v "^Not root" |
                  sed '/^ *$/d' )

    init-distrib-alias fed
}

function init-rhl-pkg()
{
    check-tools-abort dnf rpm

    #  format : cmake-0:3.11.4-7.el8.x86_64
    #           <name>-<indice>:<version>-<level>.<rel>.<arch>
    while read N; do
        pkg=${N%%:*}
        pkg=${pkg%-*}
        clean-version-string version ${N#*:}
        SCBI_PKGS["$pkg"]="$version"
    done < <( dnf repoquery --installed 2> /dev/null |
                  grep -v "^Not root" |
                  grep -v "is not registered" |
                  sed '/^ *$/d' )

    init-distrib-alias rhl
}

function init-mingw-pkg()
{
    # format: mingw-w64-x86_64-cmake 3.30.4-1
    #         rsync 3.3.0-1
    #         [<arch>-]<name> <version>
    while read pkg version; do
        pkg=${pkg#mingw-w64-x86_64-}
        clean-version-string version $version
        SCBI_PKGS["$pkg"]=$version
    done < <( pacman -Q )

    init-distrib-alias mingw
}

function init-win-pkg()
{
    true
}

############################## check-deb-pkg
# check-deb-pkg should return:
#   3 - package not found
#   2 - package found but not installed
#   1 - package installed but wrong version
#   0 - package installed with proper version

function check-none-pkg()
{
    return 0
}

function check-win-pkg()
{
    return 0
}

function check-mingw-pkg()
{
    local PCK=$1
    local VERSION=""
    get-version-number VERSION $2

    local inst_ver=${SCBI_PKGS[$PCK]}

    if [[ -z $inst_ver ]]; then
        #  Package is not installed, check if it exists

        local cand=( $(LANG=C pacman -Q | grep $PCK 2> /dev/null) )

        if [[ -n ${cand[1]} ]]; then
            clean-version-string version ${cand[1]}
            SCBI_PKGS[$PCK]=$version
            return $SCBI_STATUS_PKG_NOT_INSTALLED
        else
            return $SCBI_STATUS_PKG_NOT_FOUND
        fi

    else
        #  Is the installed version ok?

        check-versions $inst_ver ">=" $VERSION

        if [[ $? == 0 ]]; then
            return $SCBI_STATUS_VERSION_OK
        else
            return $SCBI_STATUS_VERSION_NOK
        fi
    fi
}

function check-deb-pkg()
{
    local PCK=$1
    local VERSION=""
    get-version-number VERSION $2

    local inst_ver=${SCBI_PKGS[$PCK]}

    if [[ -z $inst_ver ]]; then
        #  Package is not installed, check if it exists

        local cand=( $(LANG=C apt-cache policy $PCK | grep Candidate 2> /dev/null) )

        if [[ -n ${cand[1]} ]]; then
            clean-version-string version ${cand[1]}
            SCBI_PKGS[$PCK]=$version
            return $SCBI_STATUS_PKG_NOT_INSTALLED
        else
            return $SCBI_STATUS_PKG_NOT_FOUND
        fi

    else
        #  Is the installed version ok?

        check-versions $inst_ver ">=" $VERSION

        if [[ $? == 0 ]]; then
            return $SCBI_STATUS_VERSION_OK
        else
            return $SCBI_STATUS_VERSION_NOK
        fi
    fi
}

function check-ubt-pkg()
{
    check-deb-pkg "$1" "$2"
}

function check-cos-pkg()
{
    local PCK=$1
    local VERSION=""
    get-version-number VERSION $2

    local inst_ver=${SCBI_PKGS[$PCK]}

    if [[ -z $inst_ver ]]; then
        #  Package is not installed, check if it exists

        dnf -C list $PCK &> /dev/null

        if [[ $? = 0 ]]; then
            return $SCBI_STATUS_PKG_NOT_INSTALLED
        else
            return $SCBI_STATUS_PKG_NOT_FOUND
        fi

    else
        #  Is the installed version ok?

        check-versions $inst_ver ">=" $VERSION

        if [[ $? == 0 ]]; then
            return $SCBI_STATUS_VERSION_OK
        else
            return $SCBI_STATUS_VERSION_NOK
        fi
    fi
}

function check-fed-pkg()
{
    check-cos-pkg "$1" "$2"
}

function check-rhl-pkg()
{
    check-cos-pkg "$1" "$2"
}

############################## get-deb-lib-for-dev

function get-deb-lib-for-dev()
{
    local PKG=$1

    check-tools-abort apt-cache

    if [[ ${PKG: -4} != "-dev" ]]; then
        echo "error: $PKG is not a dev package (should end with -dev)"
        return 1
    fi

    #  package name without trailing -dev
    local base=${PKG:0:-4}

    local res=$(LC_ALL=C LANG=C apt-cache depends $1 | grep 'Depends:' \
                    | grep "$base" | cut -d':' -f2)

    for D in $res; do
        if [[ "${D: -4}" = "-dev" ]]; then
            get-deb-lib-for-dev "$D"
        else
            echo $D
        fi
    done
}

############################## get-pkg-name
# returns the package name or possibly a list of packages if
# the parameter is an alias for a distribution.

function get-pkg-name()
{
    local PKG=$1

    #  if package start with os@- it is an alias, lookup
    #  in the corresponding table:
    #
    #     SCBI_ALIAS[PKG]

    if [[ "${PKG:0:4}" == "os@-" ]]; then
        local REF="SCBI_ALIAS["$PKG"]"
        local APK=${!REF}
        if [[ -z $APK ]]; then
            echo $PKG
        else
            echo $APK
        fi
    else
        echo $PKG
    fi
}

############################## get-pkg-version
# returns the package version for the current distribution

function get-pkg-version()
{
    local PKG=$1

    local pname=$(get-pkg-name "$PKG")
    echo ${SCBI_PKGS[$pname]}
}

############################## get-lib-for-dev
# returns the library for the given dev package

function get-lib-for-dev()
{
    local PKG=$(get-pkg-name "$1")

    get-${SCBI_OS_NAME}-lib-for-dev $PKG
}

############################## check-pkg-status
#
# check a distrib package, returned code a list:
#
#   os-package
#   required-version
#   status (one of SCBI_PKG_*)

function check-pkg-status()
{
    local name_ver=( ${1/:/ } )
    local pkg=${name_ver[0]}
    local version=${name_ver[1]}

    for distname in $(get-pkg-name "$pkg"); do
        check-${SCBI_OS_NAME}-pkg $distname ${version:-0}
        echo $?
        echo ${version:-0}
        echo ${SCBI_PKGS[$distname]:-0}
        echo $distname
    done
}

############################## check-pkg
#
# check a distrib package, returned code:
#
#  0 - found & installed
#  1 - found & not installed or wrong version
#  2 - not found

function check-pkg()
{
    local name_ver=( ${1/:/ } )
    local pkg=${name_ver[0]}
    local version=${name_ver[1]}
    local cpres=0

    local MSG="error"

    [[ $DO_WARNING_EXTERNAL == yes ]] && MSG="warning"

    for distname in $(get-pkg-name "$pkg"); do
        check-${SCBI_OS_NAME}-pkg $distname $version

        local res=$?

        if [[ $res = $SCBI_STATUS_PKG_NOT_FOUND ]]; then
            echo "$MSG: $distname not found"
            cpres=2
        elif [[ $res = $SCBI_STATUS_PKG_NOT_INSTALLED ]]; then
            if [[ $version == NONE ]]; then
                echo "$MSG: $distname should be installed"
            else
                echo "$MSG: $distname:$version should be installed"
            fi
            cpres=1
        elif [[ $res = $SCBI_STATUS_VERSION_NOK ]]; then
            echo "$MSG: $distname:$version should be installed"
            cpres=1
        fi
    done

    return $cpres
}

init-${SCBI_OS_NAME}-pkg
