#  keep logs for 4 months (120 days)
[[ -z $KEEP_LOG_DAYS ]] && KEEP_LOG_DAYS=120

SCBI_LINE_SEP=$(mktemp -p /dev/shm/)
echo -n 1 > $SCBI_LINE_SEP

############################## clog

function clog()
{
    local module=$1
    echo >> $SCBI_LOGS/$TODAY/$SCBI_TARGET-$module-report.log
}

############################## line-sep
# add an empty line when needed

function line-sep()
{
    [[ $(cat $SCBI_LINE_SEP) == 0 ]] && [[ $DO_QUIET == no ]] && echo
    echo -n 1 > $SCBI_LINE_SEP
}

############################## dlog
# just force display on the console
# useful in user's hooks

function c-log-message()
{
    local -n RESULT=$1
    shift

    RESULT="${*//%B/$SCBI_CBOLD}"
    RESULT="${RESULT//%t/$SCBI_CTEXT}"
    RESULT="${RESULT//%r/$SCBI_CRED}"
    RESULT="${RESULT//%g/$SCBI_CGREEN}"
    RESULT="${RESULT//%b/$SCBI_CBLUE}"
    RESULT="${RESULT//%c/$SCBI_CCLEAR}"
}

function dlog()
{
    local MODULE=$1
    local TS
    printf -v TS "%(%Y/%m/%d %H:%M:%S)T" -1

    shift
    local MSG="$*"
    c-log-message MSG "$MSG"

    #  output to console only if present
    tty --silent
    [[ $? == 0 ]] && printf "$TS :   $MSG\n" > $(tty)
    printf "$TS :   $MSG\n" >> $SCBI_LOGS/$TODAY/$SCBI_TARGET-$MODULE-report.log
    echo -n 0 > $SCBI_LINE_SEP
}

############################## ilog

function ilog()
{
    local MODULE=$1
    local TS
    printf -v TS "%(%Y/%m/%d %H:%M:%S)T" -1

    shift
    local MSG="$*"
    c-log-message MSG "$MSG"

    [[ $DO_QUIET == no ]] && printf "$TS : $MSG\n"
    printf "$TS : $MSG\n" >> $SCBI_LOGS/$TODAY/$SCBI_TARGET-$MODULE-report.log
    echo -n 0 > $SCBI_LINE_SEP
}

############################## elog

function elog()
{
    local MODULE=$1
    local TS
    printf -v TS "%(%Y/%m/%d %H:%M:%S)T" -1

    shift
    local MSG="$*"
    c-log-message MSG "$MSG"

    printf "$TS : %s$MODULE%s %s(FAILED)%s $MSG\n" \
           $SCBI_CBOLD$SCBI_CTEXT $SCBI_CCLEAR $SCBI_CRED $SCBI_CCLEAR >&2
    printf "$TS : $MSG\n" >> $SCBI_LOGS/$TODAY/$SCBI_TARGET-$MODULE-report.log
    echo -n 0 > $SCBI_LINE_SEP
    return 1
}

############################## clean old logs

function clean-scbi-logs()
{
    #  no output as the parent directory is created before the files inside,
    #  so it could be deleted before all files inside are deleted.
    [[ -n $SCBI_LOGS ]] &&
        [[ $SCBI_LOGS != ${SCBI_LOGS#$HOME} ]] &&
        {
            #  delete old log files
            find $SCBI_LOGS  \
                 -name "*.log" -ctime +$KEEP_LOG_DAYS -delete &> /dev/null
            #  then delete empty directories
            find $SCBI_LOGS \
                 -ctime +$KEEP_LOG_DAYS -empty -type d -delete &> /dev/null
        }
}

############################## display log-stat

declare -A SCBI_STATS

function compute-log-stat-file()
{
    local FILE="$1"

    local start_time=0
    local end_time=0
    local duration=0

    while read date time x action word mod dummy; do
        if [[ "$action" =~ "Building" ]]; then
            start_time=$(date +"%s" --date="$date $time")
        elif [[ "$action" == "End" ]] && [[ $start_time != 0 ]]; then
            end_time=$(date +"%s" --date="$date $time")
            duration=$((end_time - start_time))
            start_time=0
            echo "$mod" "$duration"
        fi
    done < $FILE
}

function get-min-avr-max()
{
    local LIST="$1"

    local min=999999
    local max=0
    local n=0
    local sum=0

    for value in $LIST; do
        [[ $value -gt $max ]] && max=$value
        [[ $value -lt $min ]] && min=$value
        sum=$((sum + value))
        ((n++))
    done

    echo $min
    echo $((sum / n))
    echo $max
}

function display-time()
{
    printf "%(%M:%S)T" $1
}

function display-log-stat()
{
    local MODULE=$1

    function _display-stat()
    {
        local KEY=$1

        local values="${SCBI_STATS[$KEY]}"
        local mam=( $(get-min-avr-max "$values") )

        printf "%-55s : %s   %s   %s\n" $KEY \
               $(display-time ${mam[0]}) \
               $(display-time ${mam[1]}) \
               $(display-time ${mam[2]})
    }

    while read module duration; do
        SCBI_STATS[$module]+=" $duration"
    done < <( parallel-do compute-log-stat-file $SCBI_JOBS \
                          $(find $SCBI_LOGS -name "*$MODULE-report.log") )

    echo
    echo "build times (min, average, max):"
    echo

    parallel-do _display-stat $SCBI_JOBS "${!SCBI_STATS[@]}" | sort
    echo
}

############################## show-command
# display bash command with original command and with substitued
# variables

function _internal_copy-plugin()
{
    local PLG=$1
    local DIR=$2

    if [[ -f $SCBI_PLUGINS/$PLG ]]; then
        cp $SCBI_PLUGINS/$PLG $DIR

        #  And copy recursively all the inherited-plugins

        while read kw line; do
            [[ $kw == "inherit-plugin" ]] &&
                {
                    local HPLUGIN=""
                    local options=$(getopt -l no-variant,hooks: -- $kw $line)

                    eval set -- "$options"
                    while true; do
                        case "$1" in
                            --no-variant)
                            ;;
                            --hooks)
                                shift
                                ;;
                            --)
                                shift
                                HPLUGIN=$1
                        break
                        ;;
                        esac
                        shift
                    done

                    _internal_copy-plugin $HPLUGIN $DIR
                }
        done < $DIR/$PLG

    fi
}

function show-command()
{
    local PLUGIN=$1
    local CMD=$2
    shift 2

    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo "# $CMD"
    echo '('

    #  first output current working directory

    echo "   cd $PWD"

    #  then source env.cmd if present

    echo "   source $SCBI_BDIR/.scbi.runtime"
    echo "   [[ -f ../logs/env.cmd ]] && source ../logs/env.cmd"
    [[ $SCBI_TARGET != $SCBI_HOST ]] &&
        echo "   target-env \$SCBI_BDIR/install \$SCBI_TARGET"
    echo "   [[ -f ../logs/build-plan ]] &&"
    echo "      load-runtime-module-plan ../logs/build-plan"
    echo ""

    local TVDIR=""
    get-target-dir TVDIR $PLUGIN $VARIANT

    _internal_copy-plugin $PLUGIN $TVDIR/logs

    echo "   source ../logs/$PLUGIN"

    echo ""
    echo "   $CMD $PREFIX $TARGET $VARIANT"
    echo ')'
}

############################## body

[[ ! -d $SCBI_LOGS/$TODAY ]] && mkdir -p $SCBI_LOGS/$TODAY

clean-scbi-logs
