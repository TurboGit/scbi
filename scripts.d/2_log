# keep logs for 4 months (120 days)
[ -z $KEEP_LOG_DAYS ] && KEEP_LOG_DAYS=120

SCBI_LINE_SEP=$(mktemp)
echo -n 1 > $SCBI_LINE_SEP

############################## clog

function clog()
{
    local module=$1
    echo >> $SCBI_LOGS/$TODAY/$SCBI_TARGET-$module-report.log
}

############################## line-sep
# add an empty line when needed

function line-sep()
{
    [ $(cat $SCBI_LINE_SEP) = 0 ] && echo
    echo -n 1 > $SCBI_LINE_SEP
}

############################## dlog
# just force display on the console
# useful in user's hooks

function dlog()
{
    local module=$1
    local ts=$(date +"%Y/%m/%d %H:%M:%S")

    shift

    # output to console only if present
    tty --silent
    [ $? == 0 ] && echo $ts : "  $*" > $(tty)
    echo $ts : "  $*" >> $SCBI_LOGS/$TODAY/$SCBI_TARGET-$module-report.log
    echo -n 0 > $SCBI_LINE_SEP
}

############################## ilog

function ilog()
{
    local module=$1
    local ts=$(date +"%Y/%m/%d %H:%M:%S")

    shift
    echo $ts : $*
    echo $ts : $* >> $SCBI_LOGS/$TODAY/$SCBI_TARGET-$module-report.log
    echo -n 0 > $SCBI_LINE_SEP
}

############################## elog

function elog()
{
    local module=$1
    shift

    ilog $module $module \(FAILED\) $*
    return 1
}

############################## clean old logs

function clean-scbi-logs()
{
    # no output as the parent directory is created before the files inside,
    # so it could be deleted before all files inside are deleted.
    find $SCBI_LOGS -ctime +$KEEP_LOG_DAYS -delete &> /dev/null
}

############################## display log-stat

declare -A SCBI_STATS

function compute-log-stat-file()
{
    local file="$1"
    local module=""
    local start_time=0
    local end_time=0
    local duration=0

    while read date time x action word; do
        if [ "$action" == "Building" ]; then
            module=$word
            start_time=$(date +"%s" --date="$date $time")
        elif [ "$action" == "End" -a "$module" != "" ]; then
            end_time=$(date +"%s" --date="$date $time")
            duration=$(($end_time - $start_time))
            SCBI_STATS[$module]="${SCBI_STATS[$module]} $duration"
        fi
    done < $file
}

function get-min-avr-max()
{
    local LIST="$1"
    local min=999999
    local avr=0
    local max=0
    local n=0
    local sum=0

    for value in $LIST; do
        [[ $value -gt $max ]] && max=$value
        [[ $value -lt $min ]] && min=$value
        sum=$(($sum + $value))
        n=$(($n + 1))
    done

    avr=$(($sum / $n))

    echo $min
    echo $avr
    echo $max
}

function display-time()
{
    echo -n $(date --date=@$1 -u +"%M:%S")
}

function display-log-stat()
{
    local module=$1

    FILES=$(find $SCBI_LOGS -name "*$module-report.log")

    for file in $FILES; do
        compute-log-stat-file $file
    done

    echo
    echo "build time (min, average, max):"
    echo

    for key in "${!SCBI_STATS[@]}"; do
        values="${SCBI_STATS[$key]}"
        mam=( $(get-min-avr-max "$values") )

        echo -n $key
        for s in $(seq ${#key} 40); do
            echo -n ' '
        done

        echo -n ": "
        display-time ${mam[0]}
        echo -n "   "
        display-time ${mam[1]}
        echo -n "   "
        display-time ${mam[2]}
        echo
    done
}

############################## show-command
# display bash command with original command and with substitued
# variables

function show-command()
{
    local CMD=$1
    shift

    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo "# $CMD"
    echo '('

    # first output current working directory

    echo "   cd $PWD"

    # then source env.cmd if present

    echo "   source ../.log/fct.cmd"
    echo "   [ -f ../.log/env.cmd ] && source ../.log/env.cmd"
    echo ""

    echo "   function $CMD()"
    echo "   {"
    echo -n "    "

    # We want to keep $1, $2, $3 (the parameters)
    # and the $PREFIX, $TARGET references.
    #
    # We also keep the OPTIONS variable as support for handling
    # complex projects using OPTIONS as intermediate variable to
    # store the final options for the configuration step.
    eval echo -e \"$(type $CMD | sed '1,3d;$d;s/$PREFIX/\\$PREFIX/g;s/$TARGET/\\$TARGET/g;s/$OPTIONS/\\$OPTIONS/g;s/$1/\\$1/g;s/$2/\\$2/g;s/$3/\\$3/g;s/ \([A-Za-z]*\)=\([^;]*\)/ \1=\\"\2\\"/g')\"
    echo "   }"
    echo ""
    echo "   $CMD $PREFIX $TARGET $VARIANT"
    echo ')'
}

############################## body

[ ! -d $SCBI_LOGS/$TODAY ] && mkdir -p $SCBI_LOGS/$TODAY

clean-scbi-logs
