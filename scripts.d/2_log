#  keep logs for 4 months (120 days)
[[ -z $KEEP_LOG_DAYS ]] && KEEP_LOG_DAYS=120

SCBI_LINE_SEP=$(mktemp -p /dev/shm/)
echo -n 1 > $SCBI_LINE_SEP

############################## clog

function clog()
{
    local module=$1
    echo >> $SCBI_LOGS/$TODAY/$SCBI_TARGET-$module-report.log
}

############################## line-sep
# add an empty line when needed

function line-sep()
{
    [[ $(cat $SCBI_LINE_SEP) = 0 ]] && echo
    echo -n 1 > $SCBI_LINE_SEP
}

############################## dlog
# just force display on the console
# useful in user's hooks

function dlog()
{
    local MODULE=$1
    local TS=$(date +"%Y/%m/%d %H:%M:%S")

    shift

    #  output to console only if present
    tty --silent
    [[ $? == 0 ]] && echo $TS : "  $*" > $(tty)
    echo $ts : "  $*" >> $SCBI_LOGS/$TODAY/$SCBI_TARGET-$MODULE-report.log
    echo -n 0 > $SCBI_LINE_SEP
}

############################## ilog

function ilog()
{
    local MODULE=$1
    local TS=$(date +"%Y/%m/%d %H:%M:%S")

    shift
    echo $TS : $*
    echo $TS : $* >> $SCBI_LOGS/$TODAY/$SCBI_TARGET-$MODULE-report.log
    echo -n 0 > $SCBI_LINE_SEP
}

############################## elog

function elog()
{
    local MODULE=$1
    shift

    ilog $MODULE $MODULE \(FAILED\) $*
    return 1
}

############################## clean old logs

function clean-scbi-logs()
{
    #  no output as the parent directory is created before the files inside,
    #  so it could be deleted before all files inside are deleted.
    find $SCBI_LOGS -ctime +$KEEP_LOG_DAYS -delete &> /dev/null
}

############################## display log-stat

declare -A SCBI_STATS

function compute-log-stat-file()
{
    local FILE="$1"

    local module=""
    local start_time=0
    local end_time=0
    local duration=0

    while read date time x action word; do
        if [[ "$action" == "Building" ]]; then
            module=$word
            start_time=$(date +"%s" --date="$date $time")
        elif [[ "$action" == "End" ]] && [[ "$module" != "" ]]; then
            end_time=$(date +"%s" --date="$date $time")
            duration=$(($end_time - $start_time))
            SCBI_STATS[$module]="${SCBI_STATS[$module]} $duration"
        fi
    done < $FILE
}

function get-min-avr-max()
{
    local LIST="$1"

    local min=999999
    local avr=0
    local max=0
    local n=0
    local sum=0

    for value in $LIST; do
        [[ $value -gt $max ]] && max=$value
        [[ $value -lt $min ]] && min=$value
        sum=$(($sum + $value))
        n=$(($n + 1))
    done

    avr=$(($sum / $n))

    echo $min
    echo $avr
    echo $max
}

function display-time()
{
    echo -n $(date --date=@$1 -u +"%M:%S")
}

function display-log-stat()
{
    local MODULE=$1

    FILES=$(find $SCBI_LOGS -name "*$MODULE-report.log")

    for file in $FILES; do
        compute-log-stat-file $file
    done

    echo
    echo "build times (min, average, max):"
    echo

    for key in "${!SCBI_STATS[@]}"; do
        values="${SCBI_STATS[$key]}"
        mam=( $(get-min-avr-max "$values") )

        echo -n $key
        for s in $(seq ${#key} 55); do
            echo -n ' '
        done

        echo -n ": "
        display-time ${mam[0]}
        echo -n "   "
        display-time ${mam[1]}
        echo -n "   "
        display-time ${mam[2]}
        echo
    done
}

############################## dump-function
# dump function definition NAME, do it recursively for all used
# functions in the $NAME.

declare -A SCBI_FCT_DUMPED=[]

function dump-function()
{
    local MODULE=$1
    local NAME=$2
    local FCT=$(type $NAME | sed '1,3d;$d')

    #  Tokenize all words in FCT and if a routine, dump it

    IFS=' ();=\$!/[]{}'

    SCBI_FCT_DUMPED["$NAME"]=yes

    for word in $FCT; do
        if [[ ! -z "$word" ]]             \
               && [[ "${word}" != 'if' ]]     \
               && [[ "${word:0:1}" != '-' ]];
        then
            if [[ -z "${SCBI_FCT_DUMPED[$word]}" ]]; then
                fn-exists "$word"
                [[ $? == 0 ]] && dump-function $MODULE $word;
            fi
        fi
    done

    if [[ ${NAME#${MODULE}-} == $NAME ]]; then
        echo
        echo "   function $NAME()"
        echo "   {"
        echo "$FCT"
        echo "   }"
    fi
}

############################## show-command
# display bash command with original command and with substitued
# variables

function show-command()
{
    local MODULE=$1
    local CMD=$2
    shift
    shift

    local PREFIX=$1
    local TARGET=$2
    local VARIANT=$3

    echo "# $CMD"
    echo '('

    #  first output current working directory

    echo "   cd $PWD"

    #  then source env.cmd if present

    echo "   source ../.log/fct.cmd"
    echo "   [[ -f ../.log/env.cmd ]] && source ../.log/env.cmd"
    echo ""

    if [[ -f $SCBI_PLUGINS/$MODULE ]]; then
        cp $SCBI_PLUGINS/$MODULE ../.log
        echo "   source ../.log/$MODULE"
    fi

    (
        dump-function $MODULE $CMD
    )

    echo ""
    echo "   $CMD $PREFIX $TARGET $VARIANT"
    echo ')'
}

############################## body

[[ ! -d $SCBI_LOGS/$TODAY ]] && mkdir -p $SCBI_LOGS/$TODAY

clean-scbi-logs
